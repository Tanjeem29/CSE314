diff --git a/1805006_paging.patch b/1805006_paging.patch
new file mode 100644
index 0000000..0216cf2
--- /dev/null
+++ b/1805006_paging.patch
@@ -0,0 +1,1550 @@
+diff --git a/Makefile b/Makefile
+index 39a99d7..0cc4c6d 100644
+--- a/Makefile
++++ b/Makefile
+@@ -24,6 +24,7 @@ OBJS = \
+   $K/sleeplock.o \
+   $K/file.o \
+   $K/pipe.o \
++  $K/swap.o \
+   $K/exec.o \
+   $K/sysfile.o \
+   $K/kernelvec.o \
+@@ -128,6 +129,8 @@ UPROGS=\
+ 	$U/_rm\
+ 	$U/_sh\
+ 	$U/_stressfs\
++	$U/_mytests\
++	$U/_mytests2\
+ 	$U/_usertests\
+ 	$U/_grind\
+ 	$U/_wc\
+diff --git a/kernel/bio.c b/kernel/bio.c
+index 60d91a6..f5107f6 100644
+--- a/kernel/bio.c
++++ b/kernel/bio.c
+@@ -93,12 +93,16 @@ struct buf*
+ bread(uint dev, uint blockno)
+ {
+   struct buf *b;
+-
++  // printf("ck8\n");
+   b = bget(dev, blockno);
++  // printf("ck9\n");
+   if(!b->valid) {
++    // printf("ck11\n");
+     virtio_disk_rw(b, 0);
++    // printf("ck12\n");
+     b->valid = 1;
+   }
++  // printf("ck10\n");
+   return b;
+ }
+ 
+diff --git a/kernel/defs.h b/kernel/defs.h
+index a3c962b..b994140 100644
+--- a/kernel/defs.h
++++ b/kernel/defs.h
+@@ -8,6 +8,7 @@ struct spinlock;
+ struct sleeplock;
+ struct stat;
+ struct superblock;
++struct swap;
+ 
+ // bio.c
+ void            binit(void);
+@@ -36,6 +37,8 @@ int             filewrite(struct file*, uint64, int n);
+ 
+ // fs.c
+ void            fsinit(int);
++uint            balloc(uint dev);
++void            bfree(int dev, uint b);
+ int             dirlink(struct inode*, char*, uint);
+ struct inode*   dirlookup(struct inode*, char*, uint*);
+ struct inode*   ialloc(uint, short);
+@@ -107,6 +110,14 @@ int             either_copyout(int user_dst, uint64 dst, void *src, uint64 len);
+ int             either_copyin(void *dst, int user_src, uint64 src, uint64 len);
+ void            procdump(void);
+ 
++// swap.c
++void            swapinit(void);
++void            swapfree(struct swap*);
++struct swap*    swapalloc(void);
++void            swapout(struct swap *dst_sp, char *src_pa);
++void            swapin(char *dst_pa, struct swap *src_sp);
++void            swap_add_ref(struct swap *s);
++
+ // swtch.S
+ void            swtch(struct context*, struct context*);
+ 
+@@ -159,20 +170,24 @@ int             uartgetc(void);
+ void            kvminit(void);
+ void            kvminithart(void);
+ void            kvmmap(pagetable_t, uint64, uint64, uint64, int);
+-int             mappages(pagetable_t, uint64, uint64, uint64, int);
++int             mappages(pagetable_t, uint64, uint64, uint64, int, int, int); //flag + pid
+ pagetable_t     uvmcreate(void);
+ void            uvmfirst(pagetable_t, uchar *, uint);
+-uint64          uvmalloc(pagetable_t, uint64, uint64, int);
+-uint64          uvmdealloc(pagetable_t, uint64, uint64);
+-int             uvmcopy(pagetable_t, pagetable_t, uint64);
+-void            uvmfree(pagetable_t, uint64);
+-void            uvmunmap(pagetable_t, uint64, uint64, int);
++uint64          uvmalloc(pagetable_t, uint64, uint64, int, int, int);        // flag + pid
++uint64          uvmdealloc(pagetable_t, uint64, uint64, int, int);           // flag + pid
++int             uvmcopy(pagetable_t, pagetable_t, uint64, int, int);         // pid + ppid
++void            uvmfree(pagetable_t, uint64, int);                      // pid
++void            uvmunmap(pagetable_t, uint64, uint64, int, int, int);   // flag + pid
+ void            uvmclear(pagetable_t, uint64);
+ pte_t *         walk(pagetable_t, uint64, int);
+ uint64          walkaddr(pagetable_t, uint64);
+ int             copyout(pagetable_t, uint64, char *, uint64);
+ int             copyin(pagetable_t, char *, uint64, uint64);
+ int             copyinstr(pagetable_t, char *, uint64, uint64);
++void            page_info_init(void);
++void            printlivelist(void);
++void            swap_info_init(void);
++void            freeSwap(uint64 , struct proc * );
+ 
+ // plic.c
+ void            plicinit(void);
+diff --git a/kernel/exec.c b/kernel/exec.c
+index e18bbb6..d183e2c 100644
+--- a/kernel/exec.c
++++ b/kernel/exec.c
+@@ -62,7 +62,7 @@ exec(char *path, char **argv)
+     if(ph.vaddr % PGSIZE != 0)
+       goto bad;
+     uint64 sz1;
+-    if((sz1 = uvmalloc(pagetable, sz, ph.vaddr + ph.memsz, flags2perm(ph.flags))) == 0)
++    if((sz1 = uvmalloc(pagetable, sz, ph.vaddr + ph.memsz, flags2perm(ph.flags), 0, p->pid)) == 0)
+       goto bad;
+     sz = sz1;
+     if(loadseg(pagetable, ph.vaddr, ip, ph.off, ph.filesz) < 0)
+@@ -80,7 +80,7 @@ exec(char *path, char **argv)
+   // Use the second as the user stack.
+   sz = PGROUNDUP(sz);
+   uint64 sz1;
+-  if((sz1 = uvmalloc(pagetable, sz, sz + 2*PGSIZE, PTE_W)) == 0)
++  if((sz1 = uvmalloc(pagetable, sz, sz + 2*PGSIZE, PTE_W, 0 , p->pid)) == 0)
+     goto bad;
+   sz = sz1;
+   uvmclear(pagetable, sz-2*PGSIZE);
+diff --git a/kernel/fs.c b/kernel/fs.c
+index c6bab15..8048f27 100644
+--- a/kernel/fs.c
++++ b/kernel/fs.c
+@@ -62,15 +62,18 @@ bzero(int dev, int bno)
+ 
+ // Allocate a zeroed disk block.
+ // returns 0 if out of disk space.
+-static uint
++uint
+ balloc(uint dev)
+ {
+   int b, bi, m;
+   struct buf *bp;
+ 
+   bp = 0;
++  // printf("ck5\n");
+   for(b = 0; b < sb.size; b += BPB){
++    // printf("ck6\n");
+     bp = bread(dev, BBLOCK(b, sb));
++    // printf("ck7\n");
+     for(bi = 0; bi < BPB && b + bi < sb.size; bi++){
+       m = 1 << (bi % 8);
+       if((bp->data[bi/8] & m) == 0){  // Is block free?
+@@ -88,7 +91,7 @@ balloc(uint dev)
+ }
+ 
+ // Free a disk block.
+-static void
++void
+ bfree(int dev, uint b)
+ {
+   struct buf *bp;
+diff --git a/kernel/main.c b/kernel/main.c
+index f0d3171..bdbc52e 100644
+--- a/kernel/main.c
++++ b/kernel/main.c
+@@ -30,6 +30,9 @@ main()
+     virtio_disk_init(); // emulated hard disk
+     userinit();      // first user process
+     __sync_synchronize();
++    page_info_init();
++    swapinit();
++    swap_info_init();
+     started = 1;
+   } else {
+     while(started == 0)
+diff --git a/kernel/memlayout.h b/kernel/memlayout.h
+index 776f98c..3d99c02 100644
+--- a/kernel/memlayout.h
++++ b/kernel/memlayout.h
+@@ -65,3 +65,4 @@
+ //   TRAPFRAME (p->trapframe, used by the trampoline)
+ //   TRAMPOLINE (the same page as in the kernel)
+ #define TRAPFRAME (TRAMPOLINE - PGSIZE)
++#define MAX_PHYS_PAGES 10
+diff --git a/kernel/proc.c b/kernel/proc.c
+index 959b778..aaf5618 100644
+--- a/kernel/proc.c
++++ b/kernel/proc.c
+@@ -188,17 +188,17 @@ proc_pagetable(struct proc *p)
+   // only the supervisor uses it, on the way
+   // to/from user space, so not PTE_U.
+   if(mappages(pagetable, TRAMPOLINE, PGSIZE,
+-              (uint64)trampoline, PTE_R | PTE_X) < 0){
+-    uvmfree(pagetable, 0);
++              (uint64)trampoline, PTE_R | PTE_X, 0, p->pid) < 0){
++    uvmfree(pagetable, 0, p->pid);
+     return 0;
+   }
+ 
+   // map the trapframe page just below the trampoline page, for
+   // trampoline.S.
+   if(mappages(pagetable, TRAPFRAME, PGSIZE,
+-              (uint64)(p->trapframe), PTE_R | PTE_W) < 0){
+-    uvmunmap(pagetable, TRAMPOLINE, 1, 0);
+-    uvmfree(pagetable, 0);
++              (uint64)(p->trapframe), PTE_R | PTE_W, 0, p->pid) < 0){
++    uvmunmap(pagetable, TRAMPOLINE, 1, 0, 0, p->pid);
++    uvmfree(pagetable, 0, p->pid);
+     return 0;
+   }
+ 
+@@ -210,9 +210,9 @@ proc_pagetable(struct proc *p)
+ void
+ proc_freepagetable(pagetable_t pagetable, uint64 sz)
+ {
+-  uvmunmap(pagetable, TRAMPOLINE, 1, 0);
+-  uvmunmap(pagetable, TRAPFRAME, 1, 0);
+-  uvmfree(pagetable, sz);
++  uvmunmap(pagetable, TRAMPOLINE, 1, 0, 0, 0);
++  uvmunmap(pagetable, TRAPFRAME, 1, 0, 0, 0);
++  uvmfree(pagetable, sz, myproc()->pid);
+ }
+ 
+ // a user program that calls exec("/init")
+@@ -264,11 +264,11 @@ growproc(int n)
+ 
+   sz = p->sz;
+   if(n > 0){
+-    if((sz = uvmalloc(p->pagetable, sz, sz + n, PTE_W)) == 0) {
++    if((sz = uvmalloc(p->pagetable, sz, sz + n, PTE_W, 1, p->pid)) == 0) {
+       return -1;
+     }
+   } else if(n < 0){
+-    sz = uvmdealloc(p->pagetable, sz, sz + n);
++    sz = uvmdealloc(p->pagetable, sz, sz + n, 1,  p->pid);
+   }
+   p->sz = sz;
+   return 0;
+@@ -289,7 +289,7 @@ fork(void)
+   }
+ 
+   // Copy user memory from parent to child.
+-  if(uvmcopy(p->pagetable, np->pagetable, p->sz) < 0){
++  if(uvmcopy(p->pagetable, np->pagetable, p->sz, np->pid, p->pid) < 0){
+     freeproc(np);
+     release(&np->lock);
+     return -1;
+diff --git a/kernel/riscv.h b/kernel/riscv.h
+index 20a01db..caf407b 100644
+--- a/kernel/riscv.h
++++ b/kernel/riscv.h
+@@ -343,6 +343,7 @@ typedef uint64 *pagetable_t; // 512 PTEs
+ #define PTE_W (1L << 2)
+ #define PTE_X (1L << 3)
+ #define PTE_U (1L << 4) // user can access
++#define PTE_RSW1 (1L << 9) // user can access
+ 
+ // shift a physical address to the right place for a PTE.
+ #define PA2PTE(pa) ((((uint64)pa) >> 12) << 10)
+diff --git a/kernel/swap.c b/kernel/swap.c
+new file mode 100644
+index 0000000..9316632
+--- /dev/null
++++ b/kernel/swap.c
+@@ -0,0 +1,155 @@
++#include "types.h"
++#include "riscv.h"
++#include "fs.h"
++#include "spinlock.h"
++#include "defs.h"
++#include "param.h"
++#include "sleeplock.h"
++#include "buf.h"
++
++#define NBLOCKPERPAGE (PGSIZE / BSIZE)
++
++struct swap {
++  uint blocknos[NBLOCKPERPAGE];
++  int refcount;
++};
++
++struct run {
++  struct run *next;
++};
++
++struct {
++  struct spinlock lock;
++  struct run *freelist;
++} swapmem;
++
++// Initialize swapmem
++void
++swapinit(void)
++{
++  initlock(&swapmem.lock, "swapmem");
++  swapmem.freelist = 0;
++}
++
++// Allocate one swap struct.
++// Returns a pointer to the swap struct.
++// Returns 0 if the memory cannot be allocated.
++struct swap *
++swapalloc(void)
++{
++  struct run *r;
++  struct swap *s;
++
++  acquire(&swapmem.lock);
++  r = swapmem.freelist;
++  if(!r){
++    release(&swapmem.lock);
++    char *mem = kalloc();
++    char *mem_end = mem + PGSIZE;
++    for(; mem + sizeof(struct swap) <= mem_end; mem += sizeof(struct swap)){
++      r = (struct run*)mem;
++
++      acquire(&swapmem.lock);
++      //free mem
++      r->next = swapmem.freelist;
++      swapmem.freelist = r;
++      release(&swapmem.lock);
++    }
++    acquire(&swapmem.lock);
++    r = swapmem.freelist;
++  }
++  //alloc mem
++  swapmem.freelist = r->next;
++  release(&swapmem.lock);
++  
++  s = (struct swap*)r;
++  if(s){
++    memset((char*)s->blocknos, 0, sizeof(s->blocknos)); // fill with zeros
++    s->refcount = 1;
++  }
++    
++  
++  return s;
++}
++
++// Free the swap struct pointed by s, and the blocks
++// contained in s, which normally should have been returned
++// by a call to swapalloc() and swapout().
++void
++swapfree(struct swap *s)
++{
++  uint *blockno;
++  struct run *r;
++
++  if(!s)
++    panic("swapfree");
++  
++  s->refcount--;
++  if(s->refcount >0) {
++    
++    return;
++  }
++
++  begin_op();
++  for(blockno = s->blocknos; blockno < &s->blocknos[NBLOCKPERPAGE]; blockno++){
++    if(*blockno)
++      bfree(ROOTDEV, *blockno);
++  }
++  end_op();
++
++  r = (struct run*)s;
++
++  acquire(&swapmem.lock);
++  //free mem
++  r->next = swapmem.freelist;
++  swapmem.freelist = r;
++  release(&swapmem.lock);
++}
++
++// Swap out a given physical page src_pa to disk.
++// The metadata for retriving src_pa will be saved
++// to dst_pa which normally should have been returned
++// by a call to swapalloc().
++void
++swapout(struct swap *dst_sp, char *src_pa)
++{
++  uint *blockno;
++  struct buf *bp;
++  
++  begin_op();
++  // printf("ck2\n");
++  for(blockno = dst_sp->blocknos; blockno < &dst_sp->blocknos[NBLOCKPERPAGE]; blockno++, src_pa += BSIZE){
++    // printf("ck3\n");
++    *blockno = balloc(ROOTDEV);
++    // printf("ck4\n");
++    if(*blockno == 0)
++      panic("swapout");
++    bp = bread(ROOTDEV, *blockno);
++    memmove(bp->data, src_pa, BSIZE);
++    log_write(bp);
++    brelse(bp);
++  }
++  end_op();
++}
++
++// Swap in a page into dst_pa from disk using src_sp.
++// src_sp should normally be updated with metadata
++// for retriving the page by a call to swapout().
++void
++swapin(char *dst_pa, struct swap *src_sp)
++{
++  uint *blockno;
++  struct buf *bp;
++  
++  if(!dst_pa)
++    panic("swapin");
++  for(blockno = src_sp->blocknos; blockno < &src_sp->blocknos[NBLOCKPERPAGE]; blockno++, dst_pa += BSIZE){
++    bp = bread(ROOTDEV, *blockno);
++    memmove(dst_pa, bp->data, BSIZE);
++    brelse(bp);
++  }
++}
++
++void swap_add_ref(struct swap *s){
++  (s->refcount) ++;
++}
+\ No newline at end of file
+diff --git a/kernel/syscall.c b/kernel/syscall.c
+index ed65409..53a35f3 100644
+--- a/kernel/syscall.c
++++ b/kernel/syscall.c
+@@ -101,6 +101,7 @@ extern uint64 sys_unlink(void);
+ extern uint64 sys_link(void);
+ extern uint64 sys_mkdir(void);
+ extern uint64 sys_close(void);
++extern uint64 sys_livepages(void);
+ 
+ // An array mapping syscall numbers from syscall.h
+ // to the function that handles the system call.
+@@ -126,6 +127,7 @@ static uint64 (*syscalls[])(void) = {
+ [SYS_link]    sys_link,
+ [SYS_mkdir]   sys_mkdir,
+ [SYS_close]   sys_close,
++[SYS_livepages]   sys_livepages,
+ };
+ 
+ void
+diff --git a/kernel/syscall.h b/kernel/syscall.h
+index bc5f356..a78517d 100644
+--- a/kernel/syscall.h
++++ b/kernel/syscall.h
+@@ -20,3 +20,4 @@
+ #define SYS_link   19
+ #define SYS_mkdir  20
+ #define SYS_close  21
++#define SYS_livepages  22
+diff --git a/kernel/sysproc.c b/kernel/sysproc.c
+index 1de184e..50396af 100644
+--- a/kernel/sysproc.c
++++ b/kernel/sysproc.c
+@@ -89,3 +89,9 @@ sys_uptime(void)
+   release(&tickslock);
+   return xticks;
+ }
++uint64
++sys_livepages(void)
++{
++  printlivelist();
++  return 0;
++}
+diff --git a/kernel/trap.c b/kernel/trap.c
+index 512c850..bf00027 100644
+--- a/kernel/trap.c
++++ b/kernel/trap.c
+@@ -65,7 +65,59 @@ usertrap(void)
+     intr_on();
+ 
+     syscall();
+-  } else if((which_dev = devintr()) != 0){
++  } else if(r_scause() == 12){
++    uint64 va = PGROUNDDOWN(r_stval());
++    pte_t *pte;
++    // uint64 pa;
++    pte = walk(p->pagetable, va, 0);
++    if(*pte & PTE_RSW1){
++      printf("usertrap(): unexpected scause %p pid=%d\n", r_scause(), p->pid);
++      printf("Flags: %p\n", PTE_FLAGS(*pte));
++      printf("            sepc=%p stval=%p\n", r_sepc(), r_stval());
++      printf("Detected Swap\n");
++      // *pte &= (~PTE_RSW1);
++      if(*pte & PTE_V) printf("VALIDDD");
++      // *pte |= PTE_V;
++      freeSwap(va, p);
++      // intr_on();
++      
++    }
++    else{
++      printf("usertrap(): unexpected scause %p pid=%d\n", r_scause(), p->pid);
++      printf("            sepc=%p stval=%p\n", r_sepc(), r_stval());
++      setkilled(p);
++    }
++    // intr_on();
++
++    // syscall();
++
++    
++  }
++  else if(r_scause() == 15 || r_scause() == 13){
++    // ok
++    uint64 va = PGROUNDDOWN(r_stval());
++    pte_t *pte;
++    // uint64 pa;
++    pte = walk(p->pagetable, va, 0);
++    if(*pte & PTE_RSW1){
++      printf("Detected Swap in 15\n");
++      printf("Flags: %p\n", PTE_FLAGS(*pte));
++      printf("usertrap(): unexpected scause %p pid=%d\n", r_scause(), p->pid);
++      printf("            sepc=%p stval=%p\n", r_sepc(), r_stval());
++      freeSwap(va, p);
++      // intr_on();
++    }
++    else{
++      printf("usertrap(): unexpected scause %p pid=%d\n", r_scause(), p->pid);
++      printf("            sepc=%p stval=%p\n", r_sepc(), r_stval());
++      setkilled(p);
++      
++    }
++    // intr_on();
++
++    // syscall();
++  }
++   else if((which_dev = devintr()) != 0){
+     // ok
+   } else {
+     printf("usertrap(): unexpected scause %p pid=%d\n", r_scause(), p->pid);
+diff --git a/kernel/vm.c b/kernel/vm.c
+index 9f69783..791c0c0 100644
+--- a/kernel/vm.c
++++ b/kernel/vm.c
+@@ -5,7 +5,8 @@
+ #include "riscv.h"
+ #include "defs.h"
+ #include "fs.h"
+-
++#include "spinlock.h"
++#include "proc.h"
+ /*
+  * the kernel's page table.
+  */
+@@ -15,6 +16,279 @@ extern char etext[];  // kernel.ld sets this to end of kernel code.
+ 
+ extern char trampoline[]; // trampoline.S
+ 
++struct pair_page_info {
++  uint64 va;
++  int pid;
++  struct pair_page_info * next;
++};
++
++struct run {
++  struct run *next;
++};
++
++struct {
++  struct spinlock lock;
++  // struct run *live_list_head;
++  struct pair_page_info *live_list_head;
++  struct run *freelist;
++} live_page_list;
++
++
++struct swap_info {
++  struct swap* curr;
++  struct swap_info* next;
++  uint64 va;
++  int pid;
++};
++
++struct {
++  struct spinlock lock;
++  // struct run *live_list_head;
++  struct swap_info *head;
++  struct run *freelist;
++} swap_list;
++
++
++void
++page_info_init(void)
++{
++  initlock(&live_page_list.lock, "live_page_list");
++  live_page_list.live_list_head = 0;
++  live_page_list.freelist = 0;
++}
++
++void
++swap_info_init(void)
++{
++  initlock(&swap_list.lock, "swap_list");
++  swap_list.head = 0;
++  swap_list.freelist = 0;
++}
++
++struct pair_page_info *
++page_info_alloc(void)
++{
++  struct run *r;
++  struct pair_page_info *s;
++
++  acquire(&live_page_list.lock);
++  r = live_page_list.freelist;
++  if(!r){
++    release(&live_page_list.lock);
++    char *mem = kalloc();
++    char *mem_end = mem + PGSIZE;
++    for(; mem + sizeof(struct pair_page_info) <= mem_end; mem += sizeof(struct pair_page_info)){
++      r = (struct run*)mem;
++
++      acquire(&live_page_list.lock);
++      //free mem
++      r->next = live_page_list.freelist;
++      live_page_list.freelist = r;
++      release(&live_page_list.lock);
++    }
++    acquire(&live_page_list.lock);
++    r = live_page_list.freelist;
++  }
++  //alloc mem
++  live_page_list.freelist = r->next;
++  release(&live_page_list.lock);
++  
++  s = (struct pair_page_info*)r;
++  // if(s){
++  //     s->va = 0;
++  //     s->pid = 0;
++  // }
++    // memset((char*)s->blocknos, 0, sizeof(s->blocknos)); // fill with zeros
++  s->va = 0;
++  s->pid = 0;
++  s->next = 0;
++  return s;
++}
++
++struct swap_info *
++swap_info_alloc(void)
++{
++  struct run *r;
++  struct swap_info *s;
++
++  acquire(&swap_list.lock);
++  r = swap_list.freelist;
++  if(!r){
++    release(&swap_list.lock);
++    char *mem = kalloc();
++    char *mem_end = mem + PGSIZE;
++    for(; mem + sizeof(struct swap_info) <= mem_end; mem += sizeof(struct swap_info)){
++      r = (struct run*)mem;
++
++      acquire(&swap_list.lock);
++      //free mem
++      r->next = swap_list.freelist;
++      swap_list.freelist = r;
++      release(&swap_list.lock);
++    }
++    acquire(&swap_list.lock);
++    r = swap_list.freelist;
++  }
++  //alloc mem
++  swap_list.freelist = r->next;
++  release(&swap_list.lock);
++  
++  s = (struct swap_info*)r;
++  // if(s){
++  //     s->va = 0;
++  //     s->pid = 0;
++  // }
++    // memset((char*)s->blocknos, 0, sizeof(s->blocknos)); // fill with zeros
++  s->va = 0;
++  s->pid = 0;
++  s->next = 0;
++  s->curr = 0;
++  return s;
++}
++
++void
++page_info_free(struct pair_page_info *p)
++{
++  struct run *r;
++
++  if(!p)
++    panic("page_info_free");
++  r = (struct run*)p;
++
++  acquire(&live_page_list.lock);
++  //free mem
++  r->next = live_page_list.freelist;
++  live_page_list.freelist = r;
++  release(&live_page_list.lock);
++}
++
++void
++swap_info_free(struct swap_info *s)
++{
++  struct run *r;
++
++  if(!s)
++    panic("swap_info_free");
++  r = (struct run*)s;
++
++  acquire(&swap_list.lock);
++  //free mem
++  r->next = swap_list.freelist;
++  swap_list.freelist = r;
++  release(&swap_list.lock);
++}
++
++
++//pick out swap object from swapinfo object
++void freeSwap(uint64 va, struct proc * p){
++
++  int pid = p->pid;
++  printf("Looking for %d: %p\n",pid, va);
++  
++  acquire(&swap_list.lock);
++  struct swap_info * si = swap_list.head;
++  struct swap_info * prev = 0;
++  while(si){
++    printf("Looking at pid: %d, %p\n", si->pid, si->va);
++    if(si->pid == pid && si->va == va){
++      if(prev == 0){
++        swap_list.head = si->next;
++      }
++      else{
++        prev->next = si->next;
++      }
++
++      printf("FOUND\n");
++      break;
++
++      
++      //release(&swap_list.lock);
++      //return;
++    }
++    prev = si;
++    si = si->next;
++  }
++  if(si){
++    struct swap* s = si->curr;
++    release(&swap_list.lock);
++    swap_info_free(si);
++    
++    //remove from list
++
++    char * mem = kalloc();
++    
++    if(mem == 0) panic("freeswaperr");
++
++    pte_t * pte = walk(p->pagetable, va, 0);
++    if(pte == 0) panic("walkErr");
++    
++    int flags = PTE_FLAGS(*pte);
++    flags|=PTE_V;
++    flags&=(~PTE_RSW1);
++    swapin(mem, s);
++    swapfree(s);
++
++    if(mappages(p->pagetable, va, PGSIZE,  (uint64)mem, flags, 1, pid)<0){
++    // if(mappages(p->pagetable, va, PGSIZE,  (uint64)mem, flags, 0, pid)<0){
++      panic("MapErr");
++      return;
++    }
++    return;
++  }
++  else{
++    panic("Not found");
++  }
++  
++  release(&swap_list.lock);
++}
++
++void freeSwap2(uint64 va, struct proc * p){
++
++  int pid = p->pid;
++  printf("Looking for %d: %p\n",pid, va);
++  
++  acquire(&swap_list.lock);
++  struct swap_info * si = swap_list.head;
++  struct swap_info * prev = 0;
++  while(si){
++    printf("Looking at pid: %d, %p\n", si->pid, si->va);
++    if(si->pid == pid && si->va == va){
++      if(prev == 0){
++        swap_list.head = si->next;
++      }
++      else{
++        prev->next = si->next;
++      }
++
++      printf("FOUND\n");
++      break;
++
++      
++      //release(&swap_list.lock);
++      //return;
++    }
++    prev = si;
++    si = si->next;
++  }
++  if(si){
++    struct swap* s = si->curr;
++    release(&swap_list.lock);
++    swap_info_free(si);
++    
++    //remove from list
++    swapfree(s);
++    return;
++  }
++  else{
++    panic("Not found");
++  }
++  
++  release(&swap_list.lock);
++}
++
++
++
++
+ // Make a direct-map page table for the kernel.
+ pagetable_t
+ kvmmake(void)
+@@ -131,7 +405,7 @@ walkaddr(pagetable_t pagetable, uint64 va)
+ void
+ kvmmap(pagetable_t kpgtbl, uint64 va, uint64 pa, uint64 sz, int perm)
+ {
+-  if(mappages(kpgtbl, va, sz, pa, perm) != 0)
++  if(mappages(kpgtbl, va, sz, pa, perm, 0, 0) != 0)
+     panic("kvmmap");
+ }
+ 
+@@ -140,7 +414,7 @@ kvmmap(pagetable_t kpgtbl, uint64 va, uint64 pa, uint64 sz, int perm)
+ // be page-aligned. Returns 0 on success, -1 if walk() couldn't
+ // allocate a needed page-table page.
+ int
+-mappages(pagetable_t pagetable, uint64 va, uint64 size, uint64 pa, int perm)
++mappages(pagetable_t pagetable, uint64 va, uint64 size, uint64 pa, int perm, int flaglistadd, int pid)
+ {
+   uint64 a, last;
+   pte_t *pte;
+@@ -161,6 +435,111 @@ mappages(pagetable_t pagetable, uint64 va, uint64 size, uint64 pa, int perm)
+     a += PGSIZE;
+     pa += PGSIZE;
+   }
++  //add here
++  //reinit a and last, run for loop and re-enter into list
++  // if(flaglistadd == 1){
++  if(flaglistadd == 1 && pid>2){
++  // if(flaglistadd == 1 && pid>2 && (*pte & PTE_U) && (~(*pte & PTE_X))){
++  // if(flaglistadd == 1 && pid>2 && PGROUNDDOWN(va)){
++
++    a = PGROUNDDOWN(va);
++    last = PGROUNDDOWN(va + size - 1);
++    for(;;){
++      struct pair_page_info * pi = page_info_alloc(); 
++      pi->va = a;
++      pi->pid = pid;
++      
++      acquire(&live_page_list.lock);
++
++
++      // struct pair_page_info * curr = live_page_list.live_list_head;
++      // while(curr){
++      //   if( curr -> va == a && curr->pid == pid ){
++      //     break;
++      //   }
++      //   curr=curr->next;
++      // }
++      // if(curr) {
++      //   // curr=curr->next;
++      //   release(&live_page_list.lock);
++      //   if(a == last)
++      //     break;
++      //   a += PGSIZE;
++      //   pa += PGSIZE;
++        
++      //   continue;
++      // }
++
++      int cnt = 0;
++      struct pair_page_info *p = live_page_list.live_list_head;
++      struct pair_page_info *prev = 0;
++      if(p){
++        
++          while (p->next)
++          {
++            prev = p;
++            p=p->next;
++            
++            cnt++;
++          }
++          if(cnt >= MAX_PHYS_PAGES){
++            printf("EXCEEDED MAXPAGES\n");
++            // p=0;
++            //swap;
++            struct swap *s = swapalloc();
++            pte_t *pte2 = walk(pagetable, p->va, 0);
++            if(pte2 == 0) panic("WALKPANIC");
++
++            uint64 pa = PTE2PA(*pte2);
++
++            *pte2 |= PTE_RSW1;
++            *pte2 &= (~PTE_V);
++            //GEnjaaaaam
++            // printf("lollloll\n");
++            release(&live_page_list.lock);
++            
++            struct swap_info* si = swap_info_alloc();
++            si->curr = s;
++            si->pid = p->pid;
++            si->va = p->va;
++            acquire(&swap_list.lock);
++            si->next = swap_list.head;
++            swap_list.head = si;
++            release(&swap_list.lock);
++            printf("swapping out: %d: %p\n", si->pid, si->va);
++            swapout(s, (char*) pa);
++
++            kfree((void *)pa);
++
++            acquire(&live_page_list.lock);
++            // p=0;
++            prev->next = 0;
++            // printf("lollloll\n");
++            // break;
++          
++          }
++        
++      }
++      
++       
++      
++
++      printf("INserting : %p %d\n", a, pid);
++
++      struct pair_page_info * temp = live_page_list.live_list_head;
++      pi->next = temp;
++      live_page_list.live_list_head = pi ; 
++
++      release(&live_page_list.lock);
++
++
++      if(a == last)
++        break;
++      a += PGSIZE;
++      pa += PGSIZE;
++    }
++  }
++  
+   return 0;
+ }
+ 
+@@ -168,22 +547,68 @@ mappages(pagetable_t pagetable, uint64 va, uint64 size, uint64 pa, int perm)
+ // page-aligned. The mappings must exist.
+ // Optionally free the physical memory.
+ void
+-uvmunmap(pagetable_t pagetable, uint64 va, uint64 npages, int do_free)
++uvmunmap(pagetable_t pagetable, uint64 va, uint64 npages, int do_free, int flagremfromlist, int pid)
+ {
++  //freeswap
+   uint64 a;
+   pte_t *pte;
+ 
+   if((va % PGSIZE) != 0)
+     panic("uvmunmap: not aligned");
+-
++  
++  // printf("%p %d\n", va, npages);
+   for(a = va; a < va + npages*PGSIZE; a += PGSIZE){
++    // printf("UNGABUNGA %p %d %d\n", a, pid, npages);
+     if((pte = walk(pagetable, a, 0)) == 0)
+       panic("uvmunmap: walk");
+-    if((*pte & PTE_V) == 0)
++    if((*pte & PTE_V) == 0){
++      if(*pte & PTE_RSW1){
++        // printf("OKKKKKKK\n");
++        freeSwap2(a, myproc());
++        continue;
++
++
++      }
++      printf("%p %d\n", a, pid);
+       panic("uvmunmap: not mapped");
++    }
++      
+     if(PTE_FLAGS(*pte) == PTE_V)
+       panic("uvmunmap: not a leaf");
+     if(do_free){
++      // if(flagremfromlist){
++      if(flagremfromlist && pid>2){
++      // if(flagremfromlist && pid>2 && a){
++      // if(flagremfromlist && pid>2 && (*pte & PTE_U) && (~(*pte & PTE_X))){
++        struct pair_page_info * p1 = live_page_list.live_list_head;
++        struct pair_page_info * p2 = 0;
++        while(p1){
++          if(p1->va == a && p1->pid == pid){
++            printf("Removing: %p %d\n", a, pid);
++            break;
++          }
++          p2 = p1;
++          p1 = p1 ->next;
++        }
++        if(p1) {
++          if(p2){
++            p2->next = p1->next;
++          }
++          else{
++            live_page_list.live_list_head = p1->next;
++          }
++          page_info_free(p1);
++        }
++        // else{
++        //   printf("%d: %p\n", pid, a);
++        //   panic("uvmunmap err");
++        // }
++        
++      }
++      
++
++
++
+       uint64 pa = PTE2PA(*pte);
+       kfree((void*)pa);
+     }
+@@ -216,14 +641,14 @@ uvmfirst(pagetable_t pagetable, uchar *src, uint sz)
+     panic("uvmfirst: more than a page");
+   mem = kalloc();
+   memset(mem, 0, PGSIZE);
+-  mappages(pagetable, 0, PGSIZE, (uint64)mem, PTE_W|PTE_R|PTE_X|PTE_U);
++  mappages(pagetable, 0, PGSIZE, (uint64)mem, PTE_W|PTE_R|PTE_X|PTE_U, 0, 0);
+   memmove(mem, src, sz);
+ }
+ 
+ // Allocate PTEs and physical memory to grow process from oldsz to
+ // newsz, which need not be page aligned.  Returns new size or 0 on error.
+ uint64
+-uvmalloc(pagetable_t pagetable, uint64 oldsz, uint64 newsz, int xperm)
++uvmalloc(pagetable_t pagetable, uint64 oldsz, uint64 newsz, int xperm, int flag, int pid)
+ {
+   char *mem;
+   uint64 a;
+@@ -235,13 +660,13 @@ uvmalloc(pagetable_t pagetable, uint64 oldsz, uint64 newsz, int xperm)
+   for(a = oldsz; a < newsz; a += PGSIZE){
+     mem = kalloc();
+     if(mem == 0){
+-      uvmdealloc(pagetable, a, oldsz);
++      uvmdealloc(pagetable, a, oldsz, flag, pid);
+       return 0;
+     }
+     memset(mem, 0, PGSIZE);
+-    if(mappages(pagetable, a, PGSIZE, (uint64)mem, PTE_R|PTE_U|xperm) != 0){
++    if(mappages(pagetable, a, PGSIZE, (uint64)mem, PTE_R|PTE_U|xperm, flag, pid) != 0){
+       kfree(mem);
+-      uvmdealloc(pagetable, a, oldsz);
++      uvmdealloc(pagetable, a, oldsz, flag, pid);
+       return 0;
+     }
+   }
+@@ -253,14 +678,14 @@ uvmalloc(pagetable_t pagetable, uint64 oldsz, uint64 newsz, int xperm)
+ // need to be less than oldsz.  oldsz can be larger than the actual
+ // process size.  Returns the new process size.
+ uint64
+-uvmdealloc(pagetable_t pagetable, uint64 oldsz, uint64 newsz)
++uvmdealloc(pagetable_t pagetable, uint64 oldsz, uint64 newsz, int flag, int pid)
+ {
+   if(newsz >= oldsz)
+     return oldsz;
+ 
+   if(PGROUNDUP(newsz) < PGROUNDUP(oldsz)){
+     int npages = (PGROUNDUP(oldsz) - PGROUNDUP(newsz)) / PGSIZE;
+-    uvmunmap(pagetable, PGROUNDUP(newsz), npages, 1);
++    uvmunmap(pagetable, PGROUNDUP(newsz), npages, 1, flag, pid);
+   }
+ 
+   return newsz;
+@@ -289,13 +714,41 @@ freewalk(pagetable_t pagetable)
+ // Free user memory pages,
+ // then free page-table pages.
+ void
+-uvmfree(pagetable_t pagetable, uint64 sz)
++uvmfree(pagetable_t pagetable, uint64 sz, int pid)
+ {
+   if(sz > 0)
+-    uvmunmap(pagetable, 0, PGROUNDUP(sz)/PGSIZE, 1);
++    uvmunmap(pagetable, 0, PGROUNDUP(sz)/PGSIZE, 1, 1, pid);
+   freewalk(pagetable);
+ }
+ 
++void swap_and_fork(int ppid, int pid, int va){
++  acquire(&swap_list.lock);
++  struct swap_info* si = swap_list.head;
++  if(!si) panic("snf error2");
++  while(si->pid != ppid || si->va != va){
++    si = si->next;
++  }
++  if(si){
++    // struct swap * s = si->curr;
++    // s->refcount++;
++    swap_add_ref(si->curr);
++    release(&swap_list.lock);
++    struct swap_info* si2 = swap_info_alloc();
++    acquire(&swap_list.lock);
++    si2->curr = si->curr;
++    si2->pid = pid;
++    si2->va = va;
++    si2->next = swap_list.head;
++    swap_list.head = si2;
++    
++
++  }
++  else{
++    panic("snf error");
++  }
++  release(&swap_list.lock);
++}
++
+ // Given a parent process's page table, copy
+ // its memory into a child's page table.
+ // Copies both the page table and the
+@@ -303,7 +756,7 @@ uvmfree(pagetable_t pagetable, uint64 sz)
+ // returns 0 on success, -1 on failure.
+ // frees any allocated pages on failure.
+ int
+-uvmcopy(pagetable_t old, pagetable_t new, uint64 sz)
++uvmcopy(pagetable_t old, pagetable_t new, uint64 sz, int pid, int ppid) //child pid, parent pid
+ {
+   pte_t *pte;
+   uint64 pa, i;
+@@ -313,14 +766,29 @@ uvmcopy(pagetable_t old, pagetable_t new, uint64 sz)
+   for(i = 0; i < sz; i += PGSIZE){
+     if((pte = walk(old, i, 0)) == 0)
+       panic("uvmcopy: pte should exist");
+-    if((*pte & PTE_V) == 0)
+-      panic("uvmcopy: page not present");
++    if((*pte & PTE_V) == 0){
++      if(*pte & PTE_RSW1){
++          // panic("swapfork");
++          //va = i,
++          //get ppid, find swap_info, get swap from swap_info, swap recount ++, new swapinfo with child pid, va, ref to old swapinfo
++          swap_and_fork(ppid, pid, i);
++          pte_t* pte2 = walk(new, i, 0);
++          *pte2 = *pte; 
++          continue;
++      }
++      else{
++        panic("uvmcopy: page not present");
++      }
++      
++    }
++      
+     pa = PTE2PA(*pte);
+     flags = PTE_FLAGS(*pte);
+     if((mem = kalloc()) == 0)
+       goto err;
+     memmove(mem, (char*)pa, PGSIZE);
+-    if(mappages(new, i, PGSIZE, (uint64)mem, flags) != 0){
++    // if(mappages(new, i, PGSIZE, (uint64)mem, flags, 1, pid) != 0){
++      if(mappages(new, i, PGSIZE, (uint64)mem, flags, 0, pid) != 0){
+       kfree(mem);
+       goto err;
+     }
+@@ -328,7 +796,7 @@ uvmcopy(pagetable_t old, pagetable_t new, uint64 sz)
+   return 0;
+ 
+  err:
+-  uvmunmap(new, 0, i / PGSIZE, 1);
++  uvmunmap(new, 0, i / PGSIZE, 1, 0, pid ); ///GENJAAAAMM
+   return -1;
+ }
+ 
+@@ -437,3 +905,19 @@ copyinstr(pagetable_t pagetable, char *dst, uint64 srcva, uint64 max)
+     return -1;
+   }
+ }
++
++void printlivelist(void){
++  struct pair_page_info * curr;
++  acquire(&live_page_list.lock);
++  curr = live_page_list.live_list_head;
++  int cnt = 0;
++  while(curr){
++    printf("%d %d\n", curr->pid, curr->va);
++    curr = curr->next;
++    cnt++;
++  }
++  printf("Count: %d\n", cnt);
++  release(&live_page_list.lock);
++
++}
++
+diff --git a/swap.patch b/swap.patch
+new file mode 100644
+index 0000000..6c0f8ed
+--- /dev/null
++++ b/swap.patch
+@@ -0,0 +1,210 @@
++diff --git a/Makefile b/Makefile
++index 39a99d7..597ac8c 100644
++--- a/Makefile
+++++ b/Makefile
++@@ -24,6 +24,7 @@ OBJS = \
++   $K/sleeplock.o \
++   $K/file.o \
++   $K/pipe.o \
+++  $K/swap.o \
++   $K/exec.o \
++   $K/sysfile.o \
++   $K/kernelvec.o \
++diff --git a/kernel/defs.h b/kernel/defs.h
++index a3c962b..b8a6919 100644
++--- a/kernel/defs.h
+++++ b/kernel/defs.h
++@@ -8,6 +8,7 @@ struct spinlock;
++ struct sleeplock;
++ struct stat;
++ struct superblock;
+++struct swap;
++ 
++ // bio.c
++ void            binit(void);
++@@ -36,6 +37,8 @@ int             filewrite(struct file*, uint64, int n);
++ 
++ // fs.c
++ void            fsinit(int);
+++uint            balloc(uint dev);
+++void            bfree(int dev, uint b);
++ int             dirlink(struct inode*, char*, uint);
++ struct inode*   dirlookup(struct inode*, char*, uint*);
++ struct inode*   ialloc(uint, short);
++@@ -107,6 +110,13 @@ int             either_copyout(int user_dst, uint64 dst, void *src, uint64 len);
++ int             either_copyin(void *dst, int user_src, uint64 src, uint64 len);
++ void            procdump(void);
++ 
+++// swap.c
+++void            swapinit(void);
+++void            swapfree(struct swap*);
+++struct swap*    swapalloc(void);
+++void            swapout(struct swap *dst_sp, char *src_pa);
+++void            swapin(char *dst_pa, struct swap *src_sp);
+++
++ // swtch.S
++ void            swtch(struct context*, struct context*);
++ 
++diff --git a/kernel/fs.c b/kernel/fs.c
++index c6bab15..2d9b419 100644
++--- a/kernel/fs.c
+++++ b/kernel/fs.c
++@@ -62,7 +62,7 @@ bzero(int dev, int bno)
++ 
++ // Allocate a zeroed disk block.
++ // returns 0 if out of disk space.
++-static uint
+++uint
++ balloc(uint dev)
++ {
++   int b, bi, m;
++@@ -88,7 +88,7 @@ balloc(uint dev)
++ }
++ 
++ // Free a disk block.
++-static void
+++void
++ bfree(int dev, uint b)
++ {
++   struct buf *bp;
++diff --git a/kernel/swap.c b/kernel/swap.c
++new file mode 100644
++index 0000000..f33bf40
++--- /dev/null
+++++ b/kernel/swap.c
++@@ -0,0 +1,135 @@
+++#include "types.h"
+++#include "riscv.h"
+++#include "fs.h"
+++#include "spinlock.h"
+++#include "defs.h"
+++#include "param.h"
+++#include "sleeplock.h"
+++#include "buf.h"
+++
+++#define NBLOCKPERPAGE (PGSIZE / BSIZE)
+++
+++struct swap {
+++  uint blocknos[NBLOCKPERPAGE];
+++};
+++
+++struct run {
+++  struct run *next;
+++};
+++
+++struct {
+++  struct spinlock lock;
+++  struct run *freelist;
+++} swapmem;
+++
+++// Initialize swapmem
+++void
+++swapinit(void)
+++{
+++  initlock(&swapmem.lock, "swapmem");
+++  swapmem.freelist = 0;
+++}
+++
+++// Allocate one swap struct.
+++// Returns a pointer to the swap struct.
+++// Returns 0 if the memory cannot be allocated.
+++struct swap *
+++swapalloc(void)
+++{
+++  struct run *r;
+++  struct swap *s;
+++
+++  acquire(&swapmem.lock);
+++  r = swapmem.freelist;
+++  if(!r){
+++    release(&swapmem.lock);
+++    char *mem = kalloc();
+++    char *mem_end = mem + PGSIZE;
+++    for(; mem + sizeof(struct swap) <= mem_end; mem += sizeof(struct swap)){
+++      r = (struct run*)mem;
+++
+++      acquire(&swapmem.lock);
+++      r->next = swapmem.freelist;
+++      swapmem.freelist = r;
+++      release(&swapmem.lock);
+++    }
+++    acquire(&swapmem.lock);
+++    r = swapmem.freelist;
+++  }
+++  swapmem.freelist = r->next;
+++  release(&swapmem.lock);
+++  
+++  s = (struct swap*)r;
+++  if(s)
+++    memset((char*)s->blocknos, 0, sizeof(s->blocknos)); // fill with zeros
+++  
+++  return s;
+++}
+++
+++// Free the swap struct pointed by s, and the blocks
+++// contained in s, which normally should have been returned
+++// by a call to swapalloc() and swapout().
+++void
+++swapfree(struct swap *s)
+++{
+++  uint *blockno;
+++  struct run *r;
+++
+++  if(!s)
+++    panic("swapfree");
+++  
+++  begin_op();
+++  for(blockno = s->blocknos; blockno < &s->blocknos[NBLOCKPERPAGE]; blockno++){
+++    if(*blockno)
+++      bfree(ROOTDEV, *blockno);
+++  }
+++  end_op();
+++
+++  r = (struct run*)s;
+++
+++  acquire(&swapmem.lock);
+++  r->next = swapmem.freelist;
+++  swapmem.freelist = r;
+++  release(&swapmem.lock);
+++}
+++
+++// Swap out a given physical page src_pa to disk.
+++// The metadata for retriving src_pa will be saved
+++// to dst_pa which normally should have been returned
+++// by a call to swapalloc().
+++void
+++swapout(struct swap *dst_sp, char *src_pa)
+++{
+++  uint *blockno;
+++  struct buf *bp;
+++  
+++  begin_op();
+++  for(blockno = dst_sp->blocknos; blockno < &dst_sp->blocknos[NBLOCKPERPAGE]; blockno++, src_pa += BSIZE){
+++    *blockno = balloc(ROOTDEV);
+++    if(*blockno == 0)
+++      panic("swapout");
+++    bp = bread(ROOTDEV, *blockno);
+++    memmove(bp->data, src_pa, BSIZE);
+++    log_write(bp);
+++    brelse(bp);
+++  }
+++  end_op();
+++}
+++
+++// Swap in a page into dst_pa from disk using src_sp.
+++// src_sp should normally be updated with metadata
+++// for retriving the page by a call to swapout().
+++void
+++swapin(char *dst_pa, struct swap *src_sp)
+++{
+++  uint *blockno;
+++  struct buf *bp;
+++  
+++  if(!dst_pa)
+++    panic("swapin");
+++  for(blockno = src_sp->blocknos; blockno < &src_sp->blocknos[NBLOCKPERPAGE]; blockno++, dst_pa += BSIZE){
+++    bp = bread(ROOTDEV, *blockno);
+++    memmove(dst_pa, bp->data, BSIZE);
+++    brelse(bp);
+++  }
+++}
+diff --git a/user/mytests.c b/user/mytests.c
+new file mode 100644
+index 0000000..b69f47f
+--- /dev/null
++++ b/user/mytests.c
+@@ -0,0 +1,81 @@
++#include "kernel/types.h"
++#include "kernel/stat.h"
++#include "kernel/fcntl.h"
++#include "user/user.h"
++
++int main(){
++
++    // int x;
++    // x = 0;
++    // printf("%d\n", x);
++    livepages();
++    void *ptr = sbrk(1024);
++    char* e = (char*) ptr + 1023;
++    *e = 6;
++    livepages();
++    sbrk(-1024);
++    livepages();
++    return 0;
++
++}
++
++// #include "kernel/param.h"
++// #include "kernel/types.h"
++// #include "kernel/stat.h"
++// #include "user/user.h"
++// #include "kernel/fs.h"
++// #include "kernel/fcntl.h"
++// #include "kernel/syscall.h"
++// #include "kernel/memlayout.h"
++// #include "kernel/riscv.h"
++
++
++
++// int
++// main(int argc, char *argv[]){
++//     live_count();
++//     sbrk(20000);
++//     int arr[1000];
++//     for (int i = 0; i < 1000; i++){
++//         arr[i] = (i*i)%1000;
++//     }
++//     live_count();
++//     for (int i = 0; i < 1000; i++){
++//         printf("arr[%d] = %d\n",i,arr[i]);
++//     }
++//     // sbrk(-20000);
++//     live_count();
++
++//     return 0;
++// }
++
++// int main(int argc, char *argv[])
++// {   
++//   enum { BIG=100 };
++//   char   *a, *lastaddr, *p;
++//   uint64 amt;
++
++// //   oldbrk = sbrk(0);
++
++//   // can one grow address space to something big?
++//   printf("mysbrk1\n");
++//   a = sbrk(0);
++//   amt = BIG * 1024- (uint64)a;
++//   printf("mysbrk2\n");
++//   printf("%d\n", (uint64)a);
++//   p = sbrk(amt);
++//     lastaddr = 0;
++//     printf("p: %p\n", p);
++    
++//   // touch each page to make sure it exists.
++//   char *eee = sbrk(0);
++//   for(char *pp = a; pp < eee; pp += 4096){
++//     *pp = 53;
++//     lastaddr = pp;
++//   }
++
++// //   lastaddr = (char*) (BIG-1);
++// //   *lastaddr = 99;
++//     printf("lastaddr: %d\n", *lastaddr);
++//     return 0;
++// }
+\ No newline at end of file
+diff --git a/user/mytests2.c b/user/mytests2.c
+new file mode 100644
+index 0000000..00bf045
+--- /dev/null
++++ b/user/mytests2.c
+@@ -0,0 +1,21 @@
++#include "kernel/types.h"
++#include "kernel/stat.h"
++#include "kernel/fcntl.h"
++#include "user/user.h"
++
++int main(){
++
++    // int x;
++    // x = 0;
++    // printf("%d\n", x);
++    livepages();
++    sbrk(4096 * 16);
++    if(fork()){
++        wait(0);
++    }
++    livepages();
++    sbrk(-4096 * 16);
++    livepages();
++    return 0;
++
++}
+\ No newline at end of file
+diff --git a/user/user.h b/user/user.h
+index 4d398d5..bb94bfc 100644
+--- a/user/user.h
++++ b/user/user.h
+@@ -22,6 +22,7 @@ int getpid(void);
+ char* sbrk(int);
+ int sleep(int);
+ int uptime(void);
++int livepages(void);
+ 
+ // ulib.c
+ int stat(const char*, struct stat*);
+diff --git a/user/usys.pl b/user/usys.pl
+old mode 100755
+new mode 100644
+index 01e426e..a2f3599
+--- a/user/usys.pl
++++ b/user/usys.pl
+@@ -36,3 +36,4 @@ entry("getpid");
+ entry("sbrk");
+ entry("sleep");
+ entry("uptime");
++entry("livepages");
diff --git a/Makefile b/Makefile
index 39a99d7..8cc11dc 100644
--- a/Makefile
+++ b/Makefile
@@ -24,6 +24,7 @@ OBJS = \
   $K/sleeplock.o \
   $K/file.o \
   $K/pipe.o \
+  $K/swap.o \
   $K/exec.o \
   $K/sysfile.o \
   $K/kernelvec.o \
@@ -125,9 +126,13 @@ UPROGS=\
 	$U/_ln\
 	$U/_ls\
 	$U/_mkdir\
+	$U/_mytests\
+	$U/_mytests2\
 	$U/_rm\
 	$U/_sh\
 	$U/_stressfs\
+	$U/_testck3\
+	$U/_testck4\
 	$U/_usertests\
 	$U/_grind\
 	$U/_wc\
diff --git a/kernel/bio.c b/kernel/bio.c
index 60d91a6..f5107f6 100644
--- a/kernel/bio.c
+++ b/kernel/bio.c
@@ -93,12 +93,16 @@ struct buf*
 bread(uint dev, uint blockno)
 {
   struct buf *b;
-
+  // printf("ck8\n");
   b = bget(dev, blockno);
+  // printf("ck9\n");
   if(!b->valid) {
+    // printf("ck11\n");
     virtio_disk_rw(b, 0);
+    // printf("ck12\n");
     b->valid = 1;
   }
+  // printf("ck10\n");
   return b;
 }
 
diff --git a/kernel/defs.h b/kernel/defs.h
index a3c962b..8a6e588 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -8,6 +8,7 @@ struct spinlock;
 struct sleeplock;
 struct stat;
 struct superblock;
+struct swap;
 
 // bio.c
 void            binit(void);
@@ -36,6 +37,8 @@ int             filewrite(struct file*, uint64, int n);
 
 // fs.c
 void            fsinit(int);
+uint            balloc(uint dev);
+void            bfree(int dev, uint b);
 int             dirlink(struct inode*, char*, uint);
 struct inode*   dirlookup(struct inode*, char*, uint*);
 struct inode*   ialloc(uint, short);
@@ -63,6 +66,9 @@ void            ramdiskrw(struct buf*);
 void*           kalloc(void);
 void            kfree(void *);
 void            kinit(void);
+void            ref_down(void *);
+void            ref_up(void *);
+int             freePageCount(void);
 
 // log.c
 void            initlog(int, struct superblock*);
@@ -106,6 +112,15 @@ void            yield(void);
 int             either_copyout(int user_dst, uint64 dst, void *src, uint64 len);
 int             either_copyin(void *dst, int user_src, uint64 src, uint64 len);
 void            procdump(void);
+void            printProcPages(void);
+
+// swap.c
+void            swapinit(void);
+void            swapfree(struct swap*);
+struct swap*    swapalloc(void);
+void            swapout(struct swap *dst_sp, char *src_pa);
+void            swapin(char *dst_pa, struct swap *src_sp);
+void            swap_add_ref(struct swap *s);
 
 // swtch.S
 void            swtch(struct context*, struct context*);
@@ -159,20 +174,24 @@ int             uartgetc(void);
 void            kvminit(void);
 void            kvminithart(void);
 void            kvmmap(pagetable_t, uint64, uint64, uint64, int);
-int             mappages(pagetable_t, uint64, uint64, uint64, int);
+int             mappages(pagetable_t, uint64, uint64, uint64, int, int, int); //flag + pid
 pagetable_t     uvmcreate(void);
 void            uvmfirst(pagetable_t, uchar *, uint);
-uint64          uvmalloc(pagetable_t, uint64, uint64, int);
-uint64          uvmdealloc(pagetable_t, uint64, uint64);
-int             uvmcopy(pagetable_t, pagetable_t, uint64);
-void            uvmfree(pagetable_t, uint64);
-void            uvmunmap(pagetable_t, uint64, uint64, int);
+uint64          uvmalloc(pagetable_t, uint64, uint64, int, int, int);        // flag + pid
+uint64          uvmdealloc(pagetable_t, uint64, uint64, int, int);           // flag + pid
+int             uvmcopy(pagetable_t, pagetable_t, uint64, int, int);         // pid + ppid
+void            uvmfree(pagetable_t, uint64, int);                      // pid
+void            uvmunmap(pagetable_t, uint64, uint64, int, int, int);   // flag + pid
 void            uvmclear(pagetable_t, uint64);
 pte_t *         walk(pagetable_t, uint64, int);
 uint64          walkaddr(pagetable_t, uint64);
 int             copyout(pagetable_t, uint64, char *, uint64);
 int             copyin(pagetable_t, char *, uint64, uint64);
 int             copyinstr(pagetable_t, char *, uint64, uint64);
+void            page_info_init(void);
+void            printlivelist(void);
+void            swap_info_init(void);
+void            freeSwap(uint64 , struct proc * );
 
 // plic.c
 void            plicinit(void);
diff --git a/kernel/exec.c b/kernel/exec.c
index e18bbb6..d183e2c 100644
--- a/kernel/exec.c
+++ b/kernel/exec.c
@@ -62,7 +62,7 @@ exec(char *path, char **argv)
     if(ph.vaddr % PGSIZE != 0)
       goto bad;
     uint64 sz1;
-    if((sz1 = uvmalloc(pagetable, sz, ph.vaddr + ph.memsz, flags2perm(ph.flags))) == 0)
+    if((sz1 = uvmalloc(pagetable, sz, ph.vaddr + ph.memsz, flags2perm(ph.flags), 0, p->pid)) == 0)
       goto bad;
     sz = sz1;
     if(loadseg(pagetable, ph.vaddr, ip, ph.off, ph.filesz) < 0)
@@ -80,7 +80,7 @@ exec(char *path, char **argv)
   // Use the second as the user stack.
   sz = PGROUNDUP(sz);
   uint64 sz1;
-  if((sz1 = uvmalloc(pagetable, sz, sz + 2*PGSIZE, PTE_W)) == 0)
+  if((sz1 = uvmalloc(pagetable, sz, sz + 2*PGSIZE, PTE_W, 0 , p->pid)) == 0)
     goto bad;
   sz = sz1;
   uvmclear(pagetable, sz-2*PGSIZE);
diff --git a/kernel/fs.c b/kernel/fs.c
index c6bab15..8048f27 100644
--- a/kernel/fs.c
+++ b/kernel/fs.c
@@ -62,15 +62,18 @@ bzero(int dev, int bno)
 
 // Allocate a zeroed disk block.
 // returns 0 if out of disk space.
-static uint
+uint
 balloc(uint dev)
 {
   int b, bi, m;
   struct buf *bp;
 
   bp = 0;
+  // printf("ck5\n");
   for(b = 0; b < sb.size; b += BPB){
+    // printf("ck6\n");
     bp = bread(dev, BBLOCK(b, sb));
+    // printf("ck7\n");
     for(bi = 0; bi < BPB && b + bi < sb.size; bi++){
       m = 1 << (bi % 8);
       if((bp->data[bi/8] & m) == 0){  // Is block free?
@@ -88,7 +91,7 @@ balloc(uint dev)
 }
 
 // Free a disk block.
-static void
+void
 bfree(int dev, uint b)
 {
   struct buf *bp;
diff --git a/kernel/kalloc.c b/kernel/kalloc.c
index 0699e7e..05d38ee 100644
--- a/kernel/kalloc.c
+++ b/kernel/kalloc.c
@@ -21,8 +21,58 @@ struct run {
 struct {
   struct spinlock lock;
   struct run *freelist;
+  uint refcount[MAXPAGES];
 } kmem;
 
+int
+patoidx(void *pa){
+  uint64 pa2 =  ((uint64 ) pa);
+  if(((uint64)pa2>>PGSHIFT) >= (uint64) MAXPAGES ) return -1;
+  return (uint64)pa2/PGSIZE;
+}
+
+void 
+ref_up(void* pa){
+  acquire(&kmem.lock);
+  int idx = patoidx(pa);
+  // printf("%lu\n", *(uint64 *)pa);
+  // printf("%u\n", idx);
+  if(idx == -1){
+    printf("Error in ref inc\n");
+    release(&kmem.lock);
+    return;
+  }
+  // printf("%d %d\n", idx, kmem.refcount[idx] );
+  kmem.refcount[idx]++;
+  // printf("%d %d\n", idx, kmem.refcount[idx] );
+  release(&kmem.lock);
+}
+
+void
+ref_down(void *pa){
+  acquire(&kmem.lock);
+  int idx = patoidx(pa);
+  if(idx == -1){
+    printf("Error in ref inc\n");
+    release(&kmem.lock);
+    return;
+  }
+  kmem.refcount[idx]--;
+  if(kmem.refcount[idx] < 0){
+    //kfree(pa);
+    //panic("negative ref count in ref_down");
+    printf("negative ref count in ref_down");
+    kmem.refcount[idx] = 0;
+  }
+  if(kmem.refcount[idx] == 0){
+    release(&kmem.lock);
+    kfree(pa);
+    return;
+  }
+  
+  release(&kmem.lock);
+}
+
 void
 kinit()
 {
@@ -51,14 +101,27 @@ kfree(void *pa)
   if(((uint64)pa % PGSIZE) != 0 || (char*)pa < end || (uint64)pa >= PHYSTOP)
     panic("kfree");
 
-  // Fill with junk to catch dangling refs.
-  memset(pa, 1, PGSIZE);
-
-  r = (struct run*)pa;
+  
+  int idx = patoidx(pa);
+  if(idx == -1){
+    printf("invalid idx in kfree\n");
+    // release(&kmem.lock);
+    return;
+  }
 
   acquire(&kmem.lock);
-  r->next = kmem.freelist;
-  kmem.freelist = r;
+  if(kmem.refcount[idx] > 0) {
+    kmem.refcount[idx]--;
+  }
+  if(kmem.refcount[idx] == 0){
+    memset(pa, 1, PGSIZE);
+    r = (struct run*)pa;
+    // acquire(&kmem.lock);
+    r->next = kmem.freelist;
+    kmem.freelist = r;
+  }
+  // Fill with junk to catch dangling refs.
+  
   release(&kmem.lock);
 }
 
@@ -72,11 +135,44 @@ kalloc(void)
 
   acquire(&kmem.lock);
   r = kmem.freelist;
-  if(r)
+  if(r){
+    int idx = patoidx(r);
+    // printf("%lu\n", *(uint64 *)pa);
+    // printf("%u\n", idx);
+    if(idx == -1){
+      printf("Error in ref inc kalloc\n");
+      release(&kmem.lock);
+      return (void*) r;
+    }
+    // printf("%d %d\n", idx, kmem.refcount[idx] );
+    kmem.refcount[idx] = 1;
     kmem.freelist = r->next;
+    if(r)
+      memset((char*)r, 5, PGSIZE); // fill with junk
+  }
+    
   release(&kmem.lock);
 
-  if(r)
-    memset((char*)r, 5, PGSIZE); // fill with junk
+  // if(r){
+  //   memset((char*)r, 5, PGSIZE); // fill with junk
+  //   ref_up((void *) r);
+  // }
+    
+
   return (void*)r;
 }
+
+int
+freePageCount(void){
+  struct run * r = kmem.freelist;
+  int cnt = 0;
+  acquire(&kmem.lock);
+  while(r){
+    cnt++;
+    r = r->next;
+  }
+  release(&kmem.lock);
+  return cnt;
+
+}
+
diff --git a/kernel/main.c b/kernel/main.c
index f0d3171..bdbc52e 100644
--- a/kernel/main.c
+++ b/kernel/main.c
@@ -30,6 +30,9 @@ main()
     virtio_disk_init(); // emulated hard disk
     userinit();      // first user process
     __sync_synchronize();
+    page_info_init();
+    swapinit();
+    swap_info_init();
     started = 1;
   } else {
     while(started == 0)
diff --git a/kernel/memlayout.h b/kernel/memlayout.h
index 776f98c..e151a93 100644
--- a/kernel/memlayout.h
+++ b/kernel/memlayout.h
@@ -46,7 +46,7 @@
 // from physical address 0x80000000 to PHYSTOP.
 #define KERNBASE 0x80000000L
 #define PHYSTOP (KERNBASE + 128*1024*1024)
-
+#define MAXPAGES (PHYSTOP / PGSIZE)
 // map the trampoline page to the highest address,
 // in both user and kernel space.
 #define TRAMPOLINE (MAXVA - PGSIZE)
@@ -65,3 +65,4 @@
 //   TRAPFRAME (p->trapframe, used by the trampoline)
 //   TRAMPOLINE (the same page as in the kernel)
 #define TRAPFRAME (TRAMPOLINE - PGSIZE)
+#define MAX_PHYS_PAGES 10
diff --git a/kernel/proc.c b/kernel/proc.c
index 959b778..a70f976 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -124,6 +124,7 @@ allocproc(void)
 found:
   p->pid = allocpid();
   p->state = USED;
+  p->numcow = 0;
 
   // Allocate a trapframe page.
   if((p->trapframe = (struct trapframe *)kalloc()) == 0){
@@ -188,17 +189,17 @@ proc_pagetable(struct proc *p)
   // only the supervisor uses it, on the way
   // to/from user space, so not PTE_U.
   if(mappages(pagetable, TRAMPOLINE, PGSIZE,
-              (uint64)trampoline, PTE_R | PTE_X) < 0){
-    uvmfree(pagetable, 0);
+              (uint64)trampoline, PTE_R | PTE_X, 0, p->pid) < 0){
+    uvmfree(pagetable, 0, p->pid);
     return 0;
   }
 
   // map the trapframe page just below the trampoline page, for
   // trampoline.S.
   if(mappages(pagetable, TRAPFRAME, PGSIZE,
-              (uint64)(p->trapframe), PTE_R | PTE_W) < 0){
-    uvmunmap(pagetable, TRAMPOLINE, 1, 0);
-    uvmfree(pagetable, 0);
+              (uint64)(p->trapframe), PTE_R | PTE_W, 0, p->pid) < 0){
+    uvmunmap(pagetable, TRAMPOLINE, 1, 0, 0, p->pid);
+    uvmfree(pagetable, 0, p->pid);
     return 0;
   }
 
@@ -210,9 +211,9 @@ proc_pagetable(struct proc *p)
 void
 proc_freepagetable(pagetable_t pagetable, uint64 sz)
 {
-  uvmunmap(pagetable, TRAMPOLINE, 1, 0);
-  uvmunmap(pagetable, TRAPFRAME, 1, 0);
-  uvmfree(pagetable, sz);
+  uvmunmap(pagetable, TRAMPOLINE, 1, 0, 0, 0);
+  uvmunmap(pagetable, TRAPFRAME, 1, 0, 0, 0);
+  uvmfree(pagetable, sz, myproc()->pid);
 }
 
 // a user program that calls exec("/init")
@@ -264,11 +265,11 @@ growproc(int n)
 
   sz = p->sz;
   if(n > 0){
-    if((sz = uvmalloc(p->pagetable, sz, sz + n, PTE_W)) == 0) {
+    if((sz = uvmalloc(p->pagetable, sz, sz + n, PTE_W, 1, p->pid)) == 0) {
       return -1;
     }
   } else if(n < 0){
-    sz = uvmdealloc(p->pagetable, sz, sz + n);
+    sz = uvmdealloc(p->pagetable, sz, sz + n, 1,  p->pid);
   }
   p->sz = sz;
   return 0;
@@ -289,12 +290,14 @@ fork(void)
   }
 
   // Copy user memory from parent to child.
-  if(uvmcopy(p->pagetable, np->pagetable, p->sz) < 0){
+  if(uvmcopy(p->pagetable, np->pagetable, p->sz, np->pid, p->pid) < 0){
     freeproc(np);
     release(&np->lock);
     return -1;
   }
   np->sz = p->sz;
+  np->numcow = np->sz / PGSIZE;
+  p->numcow = np->numcow;
 
   // copy saved user registers.
   *(np->trapframe) = *(p->trapframe);
@@ -681,3 +684,14 @@ procdump(void)
     printf("\n");
   }
 }
+
+void printProcPages(void){
+  struct proc * p;
+  int pages;
+  for(p = proc; p < &proc[NPROC]; p++){
+    if(p->state != UNUSED){
+      pages = (p->sz) / PGSIZE;
+      printf("pid: %d, vpages: %d, cowbitsetpages: %d, actual phys pages used %d\n", p->pid, pages, p->numcow, pages - p->numcow );
+    }
+  }
+}
\ No newline at end of file
diff --git a/kernel/proc.h b/kernel/proc.h
index d021857..e190314 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -98,6 +98,7 @@ struct proc {
   // these are private to the process, so p->lock need not be held.
   uint64 kstack;               // Virtual address of kernel stack
   uint64 sz;                   // Size of process memory (bytes)
+  uint64 numcow;
   pagetable_t pagetable;       // User page table
   struct trapframe *trapframe; // data page for trampoline.S
   struct context context;      // swtch() here to run process
diff --git a/kernel/riscv.h b/kernel/riscv.h
index 20a01db..a786b31 100644
--- a/kernel/riscv.h
+++ b/kernel/riscv.h
@@ -343,7 +343,8 @@ typedef uint64 *pagetable_t; // 512 PTEs
 #define PTE_W (1L << 2)
 #define PTE_X (1L << 3)
 #define PTE_U (1L << 4) // user can access
-
+#define PTE_RSW1 (1L << 9) // swap bit
+#define PTE_RSW0  (1L << 8) // cow bit
 // shift a physical address to the right place for a PTE.
 #define PA2PTE(pa) ((((uint64)pa) >> 12) << 10)
 
diff --git a/kernel/swap.c b/kernel/swap.c
new file mode 100644
index 0000000..9316632
--- /dev/null
+++ b/kernel/swap.c
@@ -0,0 +1,155 @@
+#include "types.h"
+#include "riscv.h"
+#include "fs.h"
+#include "spinlock.h"
+#include "defs.h"
+#include "param.h"
+#include "sleeplock.h"
+#include "buf.h"
+
+#define NBLOCKPERPAGE (PGSIZE / BSIZE)
+
+struct swap {
+  uint blocknos[NBLOCKPERPAGE];
+  int refcount;
+};
+
+struct run {
+  struct run *next;
+};
+
+struct {
+  struct spinlock lock;
+  struct run *freelist;
+} swapmem;
+
+// Initialize swapmem
+void
+swapinit(void)
+{
+  initlock(&swapmem.lock, "swapmem");
+  swapmem.freelist = 0;
+}
+
+// Allocate one swap struct.
+// Returns a pointer to the swap struct.
+// Returns 0 if the memory cannot be allocated.
+struct swap *
+swapalloc(void)
+{
+  struct run *r;
+  struct swap *s;
+
+  acquire(&swapmem.lock);
+  r = swapmem.freelist;
+  if(!r){
+    release(&swapmem.lock);
+    char *mem = kalloc();
+    char *mem_end = mem + PGSIZE;
+    for(; mem + sizeof(struct swap) <= mem_end; mem += sizeof(struct swap)){
+      r = (struct run*)mem;
+
+      acquire(&swapmem.lock);
+      //free mem
+      r->next = swapmem.freelist;
+      swapmem.freelist = r;
+      release(&swapmem.lock);
+    }
+    acquire(&swapmem.lock);
+    r = swapmem.freelist;
+  }
+  //alloc mem
+  swapmem.freelist = r->next;
+  release(&swapmem.lock);
+  
+  s = (struct swap*)r;
+  if(s){
+    memset((char*)s->blocknos, 0, sizeof(s->blocknos)); // fill with zeros
+    s->refcount = 1;
+  }
+    
+  
+  return s;
+}
+
+// Free the swap struct pointed by s, and the blocks
+// contained in s, which normally should have been returned
+// by a call to swapalloc() and swapout().
+void
+swapfree(struct swap *s)
+{
+  uint *blockno;
+  struct run *r;
+
+  if(!s)
+    panic("swapfree");
+  
+  s->refcount--;
+  if(s->refcount >0) {
+    
+    return;
+  }
+
+  begin_op();
+  for(blockno = s->blocknos; blockno < &s->blocknos[NBLOCKPERPAGE]; blockno++){
+    if(*blockno)
+      bfree(ROOTDEV, *blockno);
+  }
+  end_op();
+
+  r = (struct run*)s;
+
+  acquire(&swapmem.lock);
+  //free mem
+  r->next = swapmem.freelist;
+  swapmem.freelist = r;
+  release(&swapmem.lock);
+}
+
+// Swap out a given physical page src_pa to disk.
+// The metadata for retriving src_pa will be saved
+// to dst_pa which normally should have been returned
+// by a call to swapalloc().
+void
+swapout(struct swap *dst_sp, char *src_pa)
+{
+  uint *blockno;
+  struct buf *bp;
+  
+  begin_op();
+  // printf("ck2\n");
+  for(blockno = dst_sp->blocknos; blockno < &dst_sp->blocknos[NBLOCKPERPAGE]; blockno++, src_pa += BSIZE){
+    // printf("ck3\n");
+    *blockno = balloc(ROOTDEV);
+    // printf("ck4\n");
+    if(*blockno == 0)
+      panic("swapout");
+    bp = bread(ROOTDEV, *blockno);
+    memmove(bp->data, src_pa, BSIZE);
+    log_write(bp);
+    brelse(bp);
+  }
+  end_op();
+}
+
+// Swap in a page into dst_pa from disk using src_sp.
+// src_sp should normally be updated with metadata
+// for retriving the page by a call to swapout().
+void
+swapin(char *dst_pa, struct swap *src_sp)
+{
+  uint *blockno;
+  struct buf *bp;
+  
+  if(!dst_pa)
+    panic("swapin");
+  for(blockno = src_sp->blocknos; blockno < &src_sp->blocknos[NBLOCKPERPAGE]; blockno++, dst_pa += BSIZE){
+    bp = bread(ROOTDEV, *blockno);
+    memmove(dst_pa, bp->data, BSIZE);
+    brelse(bp);
+  }
+}
+
+void swap_add_ref(struct swap *s){
+  (s->refcount) ++;
+}
\ No newline at end of file
diff --git a/kernel/syscall.c b/kernel/syscall.c
index ed65409..75bd3f4 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -101,6 +101,9 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_link(void);
 extern uint64 sys_mkdir(void);
 extern uint64 sys_close(void);
+extern uint64 sys_livepages(void);
+extern uint64 sys_cowtest1(void);
+extern uint64 sys_cowtest2(void);
 
 // An array mapping syscall numbers from syscall.h
 // to the function that handles the system call.
@@ -126,6 +129,9 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_livepages]   sys_livepages,
+[SYS_cowtest1]   sys_cowtest1,
+[SYS_cowtest2]   sys_cowtest2,
 };
 
 void
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..3859ae4 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -20,3 +20,6 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_livepages  22
+#define SYS_cowtest1  23
+#define SYS_cowtest2  24
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index 1de184e..3149e22 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -89,3 +89,28 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+uint64
+sys_livepages(void)
+{
+  printlivelist();
+  return 0;
+}
+uint64
+sys_cowtest1(void)
+{
+  // printf("Cowtest1\n");
+  int x = freePageCount();
+  printf("%d\n", x);
+  printProcPages();
+  return x;
+}
+
+uint64
+sys_cowtest2(void)
+{
+  printf("Cowtest2\n");
+  
+
+  return 0;
+}
+
diff --git a/kernel/trap.c b/kernel/trap.c
index 512c850..19f52e6 100644
--- a/kernel/trap.c
+++ b/kernel/trap.c
@@ -33,6 +33,138 @@ trapinithart(void)
 // handle an interrupt, exception, or system call from user space.
 // called from trampoline.S
 //
+// void
+// usertrap(void)
+// {
+//   int which_dev = 0;
+
+//   if((r_sstatus() & SSTATUS_SPP) != 0)
+//     panic("usertrap: not from user mode");
+
+//   // send interrupts and exceptions to kerneltrap(),
+//   // since we're now in the kernel.
+//   w_stvec((uint64)kernelvec);
+
+//   struct proc *p = myproc();
+  
+//   // save user program counter.
+//   p->trapframe->epc = r_sepc();
+  
+//   if(r_scause() == 8){
+//     // system call
+
+//     if(killed(p))
+//       exit(-1);
+
+//     // sepc points to the ecall instruction,
+//     // but we want to return to the next instruction.
+//     p->trapframe->epc += 4;
+
+//     // an interrupt will change sepc, scause, and sstatus,
+//     // so enable only now that we're done with those registers.
+//     intr_on();
+
+//     syscall();
+//   } 
+// else if(r_scause() == 12){
+//     uint64 va = PGROUNDDOWN(r_stval());
+//     pte_t *pte;
+//     // uint64 pa;
+//     pte = walk(p->pagetable, va, 0);
+//     if(*pte & PTE_RSW1){
+//       printf("usertrap(): unexpected scause %p pid=%d\n", r_scause(), p->pid);
+//       printf("Flags: %p\n", PTE_FLAGS(*pte));
+//       printf("            sepc=%p stval=%p\n", r_sepc(), r_stval());
+//       printf("Detected Swap\n");
+//       // *pte &= (~PTE_RSW1);
+//       if(*pte & PTE_V) printf("VALIDDD");
+//       // *pte |= PTE_V;
+//       freeSwap(va, p);
+//       // intr_on();
+      
+//     }
+//     else{
+//       printf("usertrap(): unexpected scause %p pid=%d\n", r_scause(), p->pid);
+//       printf("            sepc=%p stval=%p\n", r_sepc(), r_stval());
+//       setkilled(p);
+//     }
+//     // intr_on();
+
+//     // syscall();
+
+    
+//   }
+//   else if(r_scause() == 15){
+//     // ok
+//     uint64 va = PGROUNDDOWN(r_stval());
+//     pte_t *pte;
+//     // uint64 pa;
+//     pte = walk(p->pagetable, va, 0);
+//     if(*pte & PTE_RSW1){
+//       printf("Detected Swap in 15\n");
+//       printf("Flags: %p\n", PTE_FLAGS(*pte));
+//       printf("usertrap(): unexpected scause %p pid=%d\n", r_scause(), p->pid);
+//       printf("            sepc=%p stval=%p\n", r_sepc(), r_stval());
+//       freeSwap(va, p);
+//       // intr_on();
+//     }
+//     else{
+//       printf("usertrap(): unexpected scause %p pid=%d\n", r_scause(), p->pid);
+//       printf("            sepc=%p stval=%p\n", r_sepc(), r_stval());
+//       setkilled(p);
+      
+//     }
+//     // intr_on();
+
+//     // syscall();
+//   }
+  // else if(r_scause() == 13){
+  //   // ok
+  //   uint64 va = PGROUNDDOWN(r_stval());
+  //   pte_t *pte;
+  //   // uint64 pa;
+  //   pte = walk(p->pagetable, va, 0);
+  //   if(*pte & PTE_RSW1){
+  //     printf("Detected Swap in 15\n");
+  //     printf("Flags: %p\n", PTE_FLAGS(*pte));
+  //     printf("usertrap(): unexpected scause %p pid=%d\n", r_scause(), p->pid);
+  //     printf("            sepc=%p stval=%p\n", r_sepc(), r_stval());
+  //     freeSwap(va, p);
+  //     // intr_on();
+  //   }
+  //   else{
+  //     printf("usertrap(): unexpected scause %p pid=%d\n", r_scause(), p->pid);
+  //     printf("            sepc=%p stval=%p\n", r_sepc(), r_stval());
+  //     setkilled(p);
+      
+  //   }
+  //   // intr_on();
+
+  //   // syscall();
+  // }
+//    else if((which_dev = devintr()) != 0){
+//     // ok
+//   } else {
+//     printf("usertrap(): unexpected scause %p pid=%d\n", r_scause(), p->pid);
+//     printf("            sepc=%p stval=%p\n", r_sepc(), r_stval());
+//     setkilled(p);
+//   }
+  
+//   if(killed(p))
+//     exit(-1);
+
+//   // give up the CPU if this is a timer interrupt.
+//   if(which_dev == 2)
+//     yield();
+
+//   usertrapret();
+// }
+
+
+
+//
+// return to user space
+//
 void
 usertrap(void)
 {
@@ -67,25 +199,194 @@ usertrap(void)
     syscall();
   } else if((which_dev = devintr()) != 0){
     // ok
-  } else {
+  }
+    else if(r_scause() == 13){
+    // ok
+    uint64 va = PGROUNDDOWN(r_stval());
+    pte_t *pte;
+    // uint64 pa;
+    pte = walk(p->pagetable, va, 0);
+    if(*pte & PTE_RSW1){
+      printf("Detected Swap in 15\n");
+      printf("Flags: %p\n", PTE_FLAGS(*pte));
+      printf("usertrap(): unexpected scause %p pid=%d\n", r_scause(), p->pid);
+      printf("            sepc=%p stval=%p\n", r_sepc(), r_stval());
+      freeSwap(va, p);
+      // intr_on();
+    }
+    else{
+      printf("usertrap(): unexpected scause %p pid=%d\n", r_scause(), p->pid);
+      printf("            sepc=%p stval=%p\n", r_sepc(), r_stval());
+      setkilled(p);
+      
+    }
+    // intr_on();
+
+    // syscall();
+  }
+  else if(r_scause() == 12){
+    uint64 va = PGROUNDDOWN(r_stval());
+    pte_t *pte;
+    // uint64 pa;
+    pte = walk(p->pagetable, va, 0);
+    if(*pte & PTE_RSW1){
+      printf("usertrap(): unexpected scause %p pid=%d\n", r_scause(), p->pid);
+      printf("Flags: %p\n", PTE_FLAGS(*pte));
+      printf("            sepc=%p stval=%p\n", r_sepc(), r_stval());
+      printf("Detected Swap\n");
+      // *pte &= (~PTE_RSW1);
+      if(*pte & PTE_V) printf("VALIDDD");
+      // *pte |= PTE_V;
+      freeSwap(va, p);
+      // intr_on();
+      
+    }
+    else{
+      printf("usertrap(): unexpected scause %p pid=%d\n", r_scause(), p->pid);
+      printf("            sepc=%p stval=%p\n", r_sepc(), r_stval());
+      setkilled(p);
+    }
+    // intr_on();
+
+    // syscall();
+
+    
+  }
+  else if (r_scause() == 0xf){
+
+
+    
+    // printf("-------PAGEFAULT1------- %d\n", p->pid);
+
+    pte_t *pte;
+    uint64 pa, va;
+    uint flags;
+    // pagetable_t pgTable = p->pagetable;
+
+    va = PGROUNDDOWN(r_stval());      //set offset(12 bits) to 0, only get left 44(27?) bits
+    if(va>= MAXVA){
+      printf("in usertrap, va > MAXVA\n");
+      setkilled(p);
+      goto err;
+      // return;
+    }
+    if(va< 0x1000){
+      printf("in usertrap, va in codespace\n");
+      setkilled(p);
+      goto err;
+      // return;
+    }
+    pte = walk(p->pagetable, va, 0);  //get address of pte corresponding to va
+
+
+    if(pte == 0){
+      printf("usertrap: pte should exist\n");
+      setkilled(p);
+      goto err;
+    }   
+      
+    else{
+      flags = PTE_FLAGS(*pte);
+      // printf("ck1\n");
+      if((*pte & PTE_RSW1) && ((flags & PTE_V) == 0)){
+        printf("Detected Swap in 15\n");
+        printf("Flags: %p\n", PTE_FLAGS(*pte));
+        printf("usertrap(): unexpected scause %p pid=%d\n", r_scause(), p->pid);
+        printf("            sepc=%p stval=%p\n", r_sepc(), r_stval());
+        freeSwap(va, p);
+        goto err;
+        // intr_on();
+      }
+      else if((flags & PTE_V) == 0){
+        printf(" Page not present\n");
+        setkilled(p);
+        goto err;
+        
+      }
+      else if((flags & PTE_RSW0) == 0){
+        printf("Not COW pagefault\n");  
+        setkilled(p);
+        goto err;  
+      }
+      else if((flags & PTE_U) == 0){
+        printf("User cannot access\n");
+        setkilled(p);
+        goto err;
+      }
+      else{   //main stuff
+        // printf("ck2\n");
+        
+
+        
+
+        pa = PTE2PA(*pte);
+        if(pa>PHYSTOP){
+          printf("invalid physical address in copyout\n");
+          setkilled(p);
+          goto err;
+        }
+
+        flags |= PTE_W;
+        flags &= (~PTE_RSW0);
+        
+
+        char * mem = kalloc();
+        if(mem == 0){
+          printf("out of mem in usertrap\n");
+          setkilled(p);
+          goto err;
+        }
+        // printf("-------PAGEFAULT2-----%d\n", p->pid);
+        memmove(mem, (char*)pa, PGSIZE); //copy pa to new space pointed by mem
+        
+        //remove va from pagetable
+        uvmunmap(p->pagetable, va, 1, 0, 0, 0);
+        //decrease old pa ref
+        ref_down((void*) pa);
+
+        //map va to pa(mem), store in page table
+        if(mappages(p->pagetable, va, PGSIZE, (uint64)mem, flags, 0, 0) != 0){
+          printf("Map error in usertrap\n");
+          setkilled(p);
+          goto err;
+          // printf("Map error in usertrap\n");
+        }
+        (p->numcow)--;
+        // printf("ck3\n");
+      }
+      // printf("ck4\n");
+    }
+
+    // printf("ck5\n");
+    // printf("usertrap(): unexpected scause %p pid=%d\n", r_scause(), p->pid);
+    // printf("            sepc=%p stval=%p\n", r_sepc(), r_stval());
+    // // setkilled(p);
+    // printf("ck6\n");
+  } 
+  
+  // else if(r_scause() != 2 && r_scause() != 0xc) {
+  else{
+    printf("ck7\n");
     printf("usertrap(): unexpected scause %p pid=%d\n", r_scause(), p->pid);
     printf("            sepc=%p stval=%p\n", r_sepc(), r_stval());
     setkilled(p);
   }
-
-  if(killed(p))
+  // printf("ck8\n");
+  err:
+  if(killed(p)){
+    // printf("ck9 %d\n", p->pid);
     exit(-1);
+  }
+  // printf("ck10\n");
 
   // give up the CPU if this is a timer interrupt.
   if(which_dev == 2)
     yield();
-
+  // printf("ck11\n");
   usertrapret();
 }
 
-//
-// return to user space
-//
+
 void
 usertrapret(void)
 {
diff --git a/kernel/vm.c b/kernel/vm.c
index 9f69783..07db612 100644
--- a/kernel/vm.c
+++ b/kernel/vm.c
@@ -5,7 +5,8 @@
 #include "riscv.h"
 #include "defs.h"
 #include "fs.h"
-
+#include "spinlock.h"
+#include "proc.h"
 /*
  * the kernel's page table.
  */
@@ -15,6 +16,279 @@ extern char etext[];  // kernel.ld sets this to end of kernel code.
 
 extern char trampoline[]; // trampoline.S
 
+struct pair_page_info {
+  uint64 va;
+  int pid;
+  struct pair_page_info * next;
+};
+
+struct run {
+  struct run *next;
+};
+
+struct {
+  struct spinlock lock;
+  // struct run *live_list_head;
+  struct pair_page_info *live_list_head;
+  struct run *freelist;
+} live_page_list;
+
+
+struct swap_info {
+  struct swap* curr;
+  struct swap_info* next;
+  uint64 va;
+  int pid;
+};
+
+struct {
+  struct spinlock lock;
+  // struct run *live_list_head;
+  struct swap_info *head;
+  struct run *freelist;
+} swap_list;
+
+
+void
+page_info_init(void)
+{
+  initlock(&live_page_list.lock, "live_page_list");
+  live_page_list.live_list_head = 0;
+  live_page_list.freelist = 0;
+}
+
+void
+swap_info_init(void)
+{
+  initlock(&swap_list.lock, "swap_list");
+  swap_list.head = 0;
+  swap_list.freelist = 0;
+}
+
+struct pair_page_info *
+page_info_alloc(void)
+{
+  struct run *r;
+  struct pair_page_info *s;
+
+  acquire(&live_page_list.lock);
+  r = live_page_list.freelist;
+  if(!r){
+    release(&live_page_list.lock);
+    char *mem = kalloc();
+    char *mem_end = mem + PGSIZE;
+    for(; mem + sizeof(struct pair_page_info) <= mem_end; mem += sizeof(struct pair_page_info)){
+      r = (struct run*)mem;
+
+      acquire(&live_page_list.lock);
+      //free mem
+      r->next = live_page_list.freelist;
+      live_page_list.freelist = r;
+      release(&live_page_list.lock);
+    }
+    acquire(&live_page_list.lock);
+    r = live_page_list.freelist;
+  }
+  //alloc mem
+  live_page_list.freelist = r->next;
+  release(&live_page_list.lock);
+  
+  s = (struct pair_page_info*)r;
+  // if(s){
+  //     s->va = 0;
+  //     s->pid = 0;
+  // }
+    // memset((char*)s->blocknos, 0, sizeof(s->blocknos)); // fill with zeros
+  s->va = 0;
+  s->pid = 0;
+  s->next = 0;
+  return s;
+}
+
+struct swap_info *
+swap_info_alloc(void)
+{
+  struct run *r;
+  struct swap_info *s;
+
+  acquire(&swap_list.lock);
+  r = swap_list.freelist;
+  if(!r){
+    release(&swap_list.lock);
+    char *mem = kalloc();
+    char *mem_end = mem + PGSIZE;
+    for(; mem + sizeof(struct swap_info) <= mem_end; mem += sizeof(struct swap_info)){
+      r = (struct run*)mem;
+
+      acquire(&swap_list.lock);
+      //free mem
+      r->next = swap_list.freelist;
+      swap_list.freelist = r;
+      release(&swap_list.lock);
+    }
+    acquire(&swap_list.lock);
+    r = swap_list.freelist;
+  }
+  //alloc mem
+  swap_list.freelist = r->next;
+  release(&swap_list.lock);
+  
+  s = (struct swap_info*)r;
+  // if(s){
+  //     s->va = 0;
+  //     s->pid = 0;
+  // }
+    // memset((char*)s->blocknos, 0, sizeof(s->blocknos)); // fill with zeros
+  s->va = 0;
+  s->pid = 0;
+  s->next = 0;
+  s->curr = 0;
+  return s;
+}
+
+void
+page_info_free(struct pair_page_info *p)
+{
+  struct run *r;
+
+  if(!p)
+    panic("page_info_free");
+  r = (struct run*)p;
+
+  acquire(&live_page_list.lock);
+  //free mem
+  r->next = live_page_list.freelist;
+  live_page_list.freelist = r;
+  release(&live_page_list.lock);
+}
+
+void
+swap_info_free(struct swap_info *s)
+{
+  struct run *r;
+
+  if(!s)
+    panic("swap_info_free");
+  r = (struct run*)s;
+
+  acquire(&swap_list.lock);
+  //free mem
+  r->next = swap_list.freelist;
+  swap_list.freelist = r;
+  release(&swap_list.lock);
+}
+
+
+//pick out swap object from swapinfo object
+void freeSwap(uint64 va, struct proc * p){
+
+  int pid = p->pid;
+  printf("Looking for %d: %p\n",pid, va);
+  
+  acquire(&swap_list.lock);
+  struct swap_info * si = swap_list.head;
+  struct swap_info * prev = 0;
+  while(si){
+    printf("Looking at pid: %d, %p\n", si->pid, si->va);
+    if(si->pid == pid && si->va == va){
+      if(prev == 0){
+        swap_list.head = si->next;
+      }
+      else{
+        prev->next = si->next;
+      }
+
+      printf("FOUND\n");
+      break;
+
+      
+      //release(&swap_list.lock);
+      //return;
+    }
+    prev = si;
+    si = si->next;
+  }
+  if(si){
+    struct swap* s = si->curr;
+    release(&swap_list.lock);
+    swap_info_free(si);
+    
+    //remove from list
+
+    char * mem = kalloc();
+    
+    if(mem == 0) panic("freeswaperr");
+
+    pte_t * pte = walk(p->pagetable, va, 0);
+    if(pte == 0) panic("walkErr");
+    
+    int flags = PTE_FLAGS(*pte);
+    flags|=PTE_V;
+    flags&=(~PTE_RSW1);
+    swapin(mem, s);
+    swapfree(s);
+
+    if(mappages(p->pagetable, va, PGSIZE,  (uint64)mem, flags, 1, pid)<0){
+    // if(mappages(p->pagetable, va, PGSIZE,  (uint64)mem, flags, 0, pid)<0){
+      panic("MapErr");
+      return;
+    }
+    return;
+  }
+  else{
+    panic("Not found");
+  }
+  
+  release(&swap_list.lock);
+}
+
+void freeSwap2(uint64 va, struct proc * p){
+
+  int pid = p->pid;
+  printf("Looking for %d: %p\n",pid, va);
+  
+  acquire(&swap_list.lock);
+  struct swap_info * si = swap_list.head;
+  struct swap_info * prev = 0;
+  while(si){
+    printf("Looking at pid: %d, %p\n", si->pid, si->va);
+    if(si->pid == pid && si->va == va){
+      if(prev == 0){
+        swap_list.head = si->next;
+      }
+      else{
+        prev->next = si->next;
+      }
+
+      printf("FOUND\n");
+      break;
+
+      
+      //release(&swap_list.lock);
+      //return;
+    }
+    prev = si;
+    si = si->next;
+  }
+  if(si){
+    struct swap* s = si->curr;
+    release(&swap_list.lock);
+    swap_info_free(si);
+    
+    //remove from list
+    swapfree(s);
+    return;
+  }
+  else{
+    panic("Not found");
+  }
+  
+  release(&swap_list.lock);
+}
+
+
+
+
 // Make a direct-map page table for the kernel.
 pagetable_t
 kvmmake(void)
@@ -131,7 +405,7 @@ walkaddr(pagetable_t pagetable, uint64 va)
 void
 kvmmap(pagetable_t kpgtbl, uint64 va, uint64 pa, uint64 sz, int perm)
 {
-  if(mappages(kpgtbl, va, sz, pa, perm) != 0)
+  if(mappages(kpgtbl, va, sz, pa, perm, 0, 0) != 0)
     panic("kvmmap");
 }
 
@@ -140,7 +414,7 @@ kvmmap(pagetable_t kpgtbl, uint64 va, uint64 pa, uint64 sz, int perm)
 // be page-aligned. Returns 0 on success, -1 if walk() couldn't
 // allocate a needed page-table page.
 int
-mappages(pagetable_t pagetable, uint64 va, uint64 size, uint64 pa, int perm)
+mappages(pagetable_t pagetable, uint64 va, uint64 size, uint64 pa, int perm, int flaglistadd, int pid)
 {
   uint64 a, last;
   pte_t *pte;
@@ -161,6 +435,111 @@ mappages(pagetable_t pagetable, uint64 va, uint64 size, uint64 pa, int perm)
     a += PGSIZE;
     pa += PGSIZE;
   }
+  //add here
+  //reinit a and last, run for loop and re-enter into list
+  // if(flaglistadd == 1){
+  if(flaglistadd == 1 && pid>2){
+  // if(flaglistadd == 1 && pid>2 && (*pte & PTE_U) && (~(*pte & PTE_X))){
+  // if(flaglistadd == 1 && pid>2 && PGROUNDDOWN(va)){
+
+    a = PGROUNDDOWN(va);
+    last = PGROUNDDOWN(va + size - 1);
+    for(;;){
+      struct pair_page_info * pi = page_info_alloc(); 
+      pi->va = a;
+      pi->pid = pid;
+      
+      acquire(&live_page_list.lock);
+
+
+      // struct pair_page_info * curr = live_page_list.live_list_head;
+      // while(curr){
+      //   if( curr -> va == a && curr->pid == pid ){
+      //     break;
+      //   }
+      //   curr=curr->next;
+      // }
+      // if(curr) {
+      //   // curr=curr->next;
+      //   release(&live_page_list.lock);
+      //   if(a == last)
+      //     break;
+      //   a += PGSIZE;
+      //   pa += PGSIZE;
+        
+      //   continue;
+      // }
+
+      int cnt = 0;
+      struct pair_page_info *p = live_page_list.live_list_head;
+      struct pair_page_info *prev = 0;
+      if(p){
+        
+          while (p->next)
+          {
+            prev = p;
+            p=p->next;
+            
+            cnt++;
+          }
+          if(cnt >= MAX_PHYS_PAGES){
+            printf("EXCEEDED MAXPAGES\n");
+            // p=0;
+            //swap;
+            struct swap *s = swapalloc();
+            pte_t *pte2 = walk(pagetable, p->va, 0);
+            if(pte2 == 0) panic("WALKPANIC");
+
+            uint64 pa = PTE2PA(*pte2);
+
+            *pte2 |= PTE_RSW1;
+            *pte2 &= (~PTE_V);
+            //GEnjaaaaam
+            // printf("lollloll\n");
+            release(&live_page_list.lock);
+            
+            struct swap_info* si = swap_info_alloc();
+            si->curr = s;
+            si->pid = p->pid;
+            si->va = p->va;
+            acquire(&swap_list.lock);
+            si->next = swap_list.head;
+            swap_list.head = si;
+            release(&swap_list.lock);
+            printf("swapping out: %d: %p\n", si->pid, si->va);
+            swapout(s, (char*) pa);
+
+            kfree((void *)pa);
+
+            acquire(&live_page_list.lock);
+            // p=0;
+            prev->next = 0;
+            // printf("lollloll\n");
+            // break;
+          
+          }
+        
+      }
+      
+       
+      
+
+      printf("INserting : %p %d\n", a, pid);
+
+      struct pair_page_info * temp = live_page_list.live_list_head;
+      pi->next = temp;
+      live_page_list.live_list_head = pi ; 
+
+      release(&live_page_list.lock);
+
+
+      if(a == last)
+        break;
+      a += PGSIZE;
+      pa += PGSIZE;
+    }
+  }
+  
   return 0;
 }
 
@@ -168,22 +547,68 @@ mappages(pagetable_t pagetable, uint64 va, uint64 size, uint64 pa, int perm)
 // page-aligned. The mappings must exist.
 // Optionally free the physical memory.
 void
-uvmunmap(pagetable_t pagetable, uint64 va, uint64 npages, int do_free)
+uvmunmap(pagetable_t pagetable, uint64 va, uint64 npages, int do_free, int flagremfromlist, int pid)
 {
+  //freeswap
   uint64 a;
   pte_t *pte;
 
   if((va % PGSIZE) != 0)
     panic("uvmunmap: not aligned");
-
+  
+  // printf("%p %d\n", va, npages);
   for(a = va; a < va + npages*PGSIZE; a += PGSIZE){
+    // printf("UNGABUNGA %p %d %d\n", a, pid, npages);
     if((pte = walk(pagetable, a, 0)) == 0)
       panic("uvmunmap: walk");
-    if((*pte & PTE_V) == 0)
+    if((*pte & PTE_V) == 0){
+      if(*pte & PTE_RSW1){
+        // printf("OKKKKKKK\n");
+        freeSwap2(a, myproc());
+        continue;
+
+
+      }
+      printf("%p %d\n", a, pid);
       panic("uvmunmap: not mapped");
+    }
+      
     if(PTE_FLAGS(*pte) == PTE_V)
       panic("uvmunmap: not a leaf");
     if(do_free){
+      // if(flagremfromlist){
+      if(flagremfromlist && pid>2){
+      // if(flagremfromlist && pid>2 && a){
+      // if(flagremfromlist && pid>2 && (*pte & PTE_U) && (~(*pte & PTE_X))){
+        struct pair_page_info * p1 = live_page_list.live_list_head;
+        struct pair_page_info * p2 = 0;
+        while(p1){
+          if(p1->va == a && p1->pid == pid){
+            printf("Removing: %p %d\n", a, pid);
+            break;
+          }
+          p2 = p1;
+          p1 = p1 ->next;
+        }
+        if(p1) {
+          if(p2){
+            p2->next = p1->next;
+          }
+          else{
+            live_page_list.live_list_head = p1->next;
+          }
+          page_info_free(p1);
+        }
+        // else{
+        //   printf("%d: %p\n", pid, a);
+        //   panic("uvmunmap err");
+        // }
+        
+      }
+      
+
+
+
       uint64 pa = PTE2PA(*pte);
       kfree((void*)pa);
     }
@@ -216,14 +641,14 @@ uvmfirst(pagetable_t pagetable, uchar *src, uint sz)
     panic("uvmfirst: more than a page");
   mem = kalloc();
   memset(mem, 0, PGSIZE);
-  mappages(pagetable, 0, PGSIZE, (uint64)mem, PTE_W|PTE_R|PTE_X|PTE_U);
+  mappages(pagetable, 0, PGSIZE, (uint64)mem, PTE_W|PTE_R|PTE_X|PTE_U, 0, 0);
   memmove(mem, src, sz);
 }
 
 // Allocate PTEs and physical memory to grow process from oldsz to
 // newsz, which need not be page aligned.  Returns new size or 0 on error.
 uint64
-uvmalloc(pagetable_t pagetable, uint64 oldsz, uint64 newsz, int xperm)
+uvmalloc(pagetable_t pagetable, uint64 oldsz, uint64 newsz, int xperm, int flag, int pid)
 {
   char *mem;
   uint64 a;
@@ -235,13 +660,13 @@ uvmalloc(pagetable_t pagetable, uint64 oldsz, uint64 newsz, int xperm)
   for(a = oldsz; a < newsz; a += PGSIZE){
     mem = kalloc();
     if(mem == 0){
-      uvmdealloc(pagetable, a, oldsz);
+      uvmdealloc(pagetable, a, oldsz, flag, pid);
       return 0;
     }
     memset(mem, 0, PGSIZE);
-    if(mappages(pagetable, a, PGSIZE, (uint64)mem, PTE_R|PTE_U|xperm) != 0){
+    if(mappages(pagetable, a, PGSIZE, (uint64)mem, PTE_R|PTE_U|xperm, flag, pid) != 0){
       kfree(mem);
-      uvmdealloc(pagetable, a, oldsz);
+      uvmdealloc(pagetable, a, oldsz, flag, pid);
       return 0;
     }
   }
@@ -253,14 +678,14 @@ uvmalloc(pagetable_t pagetable, uint64 oldsz, uint64 newsz, int xperm)
 // need to be less than oldsz.  oldsz can be larger than the actual
 // process size.  Returns the new process size.
 uint64
-uvmdealloc(pagetable_t pagetable, uint64 oldsz, uint64 newsz)
+uvmdealloc(pagetable_t pagetable, uint64 oldsz, uint64 newsz, int flag, int pid)
 {
   if(newsz >= oldsz)
     return oldsz;
 
   if(PGROUNDUP(newsz) < PGROUNDUP(oldsz)){
     int npages = (PGROUNDUP(oldsz) - PGROUNDUP(newsz)) / PGSIZE;
-    uvmunmap(pagetable, PGROUNDUP(newsz), npages, 1);
+    uvmunmap(pagetable, PGROUNDUP(newsz), npages, 1, flag, pid);
   }
 
   return newsz;
@@ -289,13 +714,41 @@ freewalk(pagetable_t pagetable)
 // Free user memory pages,
 // then free page-table pages.
 void
-uvmfree(pagetable_t pagetable, uint64 sz)
+uvmfree(pagetable_t pagetable, uint64 sz, int pid)
 {
   if(sz > 0)
-    uvmunmap(pagetable, 0, PGROUNDUP(sz)/PGSIZE, 1);
+    uvmunmap(pagetable, 0, PGROUNDUP(sz)/PGSIZE, 1, 1, pid);
   freewalk(pagetable);
 }
 
+void swap_and_fork(int ppid, int pid, int va){
+  acquire(&swap_list.lock);
+  struct swap_info* si = swap_list.head;
+  if(!si) panic("snf error2");
+  while(si->pid != ppid || si->va != va){
+    si = si->next;
+  }
+  if(si){
+    // struct swap * s = si->curr;
+    // s->refcount++;
+    swap_add_ref(si->curr);
+    release(&swap_list.lock);
+    struct swap_info* si2 = swap_info_alloc();
+    acquire(&swap_list.lock);
+    si2->curr = si->curr;
+    si2->pid = pid;
+    si2->va = va;
+    si2->next = swap_list.head;
+    swap_list.head = si2;
+    
+
+  }
+  else{
+    panic("snf error");
+  }
+  release(&swap_list.lock);
+}
+
 // Given a parent process's page table, copy
 // its memory into a child's page table.
 // Copies both the page table and the
@@ -303,32 +756,73 @@ uvmfree(pagetable_t pagetable, uint64 sz)
 // returns 0 on success, -1 on failure.
 // frees any allocated pages on failure.
 int
-uvmcopy(pagetable_t old, pagetable_t new, uint64 sz)
+uvmcopy(pagetable_t old, pagetable_t new, uint64 sz, int pid, int ppid) //child pid, parent pid
 {
   pte_t *pte;
   uint64 pa, i;
   uint flags;
-  char *mem;
+  // char *mem;
 
   for(i = 0; i < sz; i += PGSIZE){
     if((pte = walk(old, i, 0)) == 0)
       panic("uvmcopy: pte should exist");
-    if((*pte & PTE_V) == 0)
-      panic("uvmcopy: page not present");
-    pa = PTE2PA(*pte);
+    if((*pte & PTE_V) == 0){
+      if(*pte & PTE_RSW1){
+          // panic("swapfork");
+          //va = i,
+          //get ppid, find swap_info, get swap from swap_info, swap recount ++, new swapinfo with child pid, va, ref to old swapinfo
+          swap_and_fork(ppid, pid, i);
+          pte_t* pte2 = walk(new, i, 0);
+          *pte2 = *pte; 
+          continue;
+      }
+      else{
+        panic("uvmcopy: page not present");
+      }
+      
+    }
+    pa = PTE2PA(*pte);                      //get 1st 44 bytes of phys Address == 1st 44 bytes of *pte. rest 12 offset = 0. ie get page, not bytes in page
     flags = PTE_FLAGS(*pte);
-    if((mem = kalloc()) == 0)
-      goto err;
-    memmove(mem, (char*)pa, PGSIZE);
-    if(mappages(new, i, PGSIZE, (uint64)mem, flags) != 0){
-      kfree(mem);
+    // // dont alloc mem
+    // if((mem = kalloc()) == 0)            
+    //   goto err;
+    // memmove(mem, (char*)pa, PGSIZE);  //basically byte by byte copy of page (PGSIZE) arg2 to arg1. string copy/ char* copy
+
+    //Clear Write bit
+    flags &= (~PTE_W);
+
+    //Set COWed bit ==  RSW bit to track page fault
+    flags |= (PTE_RSW0);
+
+    //map phys address to new proc page table 
+    if(mappages(new, i, PGSIZE, pa, flags,0,0) != 0){
       goto err;
     }
+    //refcountincrease
+    ref_up((void*) pa);
+
+    //unmap phys page to remap with updated write flag. Don't free
+    // uvmunmap(old, i, 1, 0);
+    // if(mappages(old, i, PGSIZE, pa, flags) != 0){
+    //   goto err;
+    // }
+    *pte &= (~PTE_W);
+    *pte |= (PTE_RSW0);
+    // pa = PTE2PA(*pte);
+    // flags = PTE_FLAGS(*pte);
+    // if((mem = kalloc()) == 0)
+    //   goto err;
+    // memmove(mem, (char*)pa, PGSIZE);
+    // // if(mappages(new, i, PGSIZE, (uint64)mem, flags, 1, pid) != 0){
+    //   if(mappages(new, i, PGSIZE, (uint64)mem, flags, 0, pid) != 0){
+    //   kfree(mem);
+    //   goto err;
+    // }
   }
   return 0;
 
  err:
-  uvmunmap(new, 0, i / PGSIZE, 1);
+  uvmunmap(new, 0, i / PGSIZE, 1, 0, pid ); ///GENJAAAAMM
   return -1;
 }
 
@@ -348,16 +842,116 @@ uvmclear(pagetable_t pagetable, uint64 va)
 // Copy from kernel to user.
 // Copy len bytes from src to virtual address dstva in a given page table.
 // Return 0 on success, -1 on error.
+// int
+// copyout(pagetable_t pagetable, uint64 dstva, char *src, uint64 len)
+// {
+//   uint64 n, va0, pa0;
+
+//   while(len > 0){
+//     va0 = PGROUNDDOWN(dstva);
+//     pa0 = walkaddr(pagetable, va0);
+//     if(pa0 == 0)
+//       return -1;
+//     n = PGSIZE - (dstva - va0);
+//     if(n > len)
+//       n = len;
+//     memmove((void *)(pa0 + (dstva - va0)), src, n);
+
+//     len -= n;
+//     src += n;
+//     dstva = va0 + PGSIZE;
+//   }
+//   return 0;
+// }
 int
 copyout(pagetable_t pagetable, uint64 dstva, char *src, uint64 len)
 {
   uint64 n, va0, pa0;
-
+  pte_t *pte;
+  uint flags;
+  // char *mem2 = 0;
   while(len > 0){
+    // printf("len2 : %d\n", len);
+
     va0 = PGROUNDDOWN(dstva);
+    // printf("va0 : %d\n", va0);
+    if(va0>=MAXVA){
+      printf("Invalid Virtual Address (MAX) in copyout\n");
+      return -1;
+    }
+    if(va0 < 0x1000){
+      printf("Invalid Virtual Address (MIN) in copyout\n");
+      return -1;
+      // return;
+    }
+    pte = walk(pagetable, va0, 0);
+    // printf("pte* : %d\n", *pte);
+
+    if(pte == 0){
+      printf("null page table entry in copyout\n");
+      return -1;
+    }
+
+    pa0 = walkaddr(pagetable, va0);
+    if(pa0 == 0){
+      printf("Null physical address in copyout");
+      return -1;
+    }
+      
+    
+    
+    flags = PTE_FLAGS(*pte);
+    // printf("flags : %d\n", flags);
+    if((flags & PTE_V) == 0){
+      // printf("ck12\n");
+      printf("Invalid Validity bit in copyout\n");
+      return -1;
+    }
+    // printf("ck13\n");
+    if((flags & PTE_U) == 0){
+      // printf("ck14\n");
+      printf("Invalid User access bit in copyout\n");
+      return -1;
+    }
+    // printf("ck15\n");
+    if(flags & PTE_RSW0){
+      // printf("Mainn copyout\n");
+      pa0 = PTE2PA(*pte);                      //get 1st 44 bytes of phys Address == 1st 44 bytes of *pte. rest 12 offset = 0. ie get page, not bytes in page
+      // printf("pa0 : %d\n", pa0);
+      if(pa0>PHYSTOP){
+        printf("invalid physical address in copyout\n");
+        return -1;
+      }
+      flags |= PTE_W;
+      flags &= (~PTE_RSW0);
+
+      char *mem = kalloc();
+      if(mem == 0) {
+        printf("Kalloc Err in Copyout\n");
+        return -1;
+      }
+      memmove(mem, (void *)pa0, PGSIZE); //move to mem from pa0;
+      uvmunmap(pagetable, va0, 1, 0, 0, 0);
+      // ref_down((void *) pa0);
+      kfree((void *)pa0);
+
+      if(mappages(pagetable, va0, PGSIZE, (uint64)mem, flags, 0, 0)!=0){
+        kfree(mem);
+        printf("Mapping error in copyout\n");
+        return -1;
+
+        // panic("Mapping error in copyout\n");
+      }
+      // *mem2 = *mem;
+      //pa0 = (uint64) mem;
+    }
+    // printf("ck16\n");
     pa0 = walkaddr(pagetable, va0);
+    // printf("ck17\n");
+    // if(pa0 == * ((uint64 *) mem2)) printf("OKKKKKKK\n");
     if(pa0 == 0)
       return -1;
+    // printf("ck18\n");
     n = PGSIZE - (dstva - va0);
     if(n > len)
       n = len;
@@ -366,7 +960,8 @@ copyout(pagetable_t pagetable, uint64 dstva, char *src, uint64 len)
     len -= n;
     src += n;
     dstva = va0 + PGSIZE;
-  }
+  }  
+
   return 0;
 }
 
@@ -437,3 +1032,19 @@ copyinstr(pagetable_t pagetable, char *dst, uint64 srcva, uint64 max)
     return -1;
   }
 }
+
+void printlivelist(void){
+  struct pair_page_info * curr;
+  acquire(&live_page_list.lock);
+  curr = live_page_list.live_list_head;
+  int cnt = 0;
+  while(curr){
+    printf("%d %d\n", curr->pid, curr->va);
+    curr = curr->next;
+    cnt++;
+  }
+  printf("Count: %d\n", cnt);
+  release(&live_page_list.lock);
+
+}
+
diff --git a/swap.patch b/swap.patch
new file mode 100644
index 0000000..6c0f8ed
--- /dev/null
+++ b/swap.patch
@@ -0,0 +1,210 @@
+diff --git a/Makefile b/Makefile
+index 39a99d7..597ac8c 100644
+--- a/Makefile
++++ b/Makefile
+@@ -24,6 +24,7 @@ OBJS = \
+   $K/sleeplock.o \
+   $K/file.o \
+   $K/pipe.o \
++  $K/swap.o \
+   $K/exec.o \
+   $K/sysfile.o \
+   $K/kernelvec.o \
+diff --git a/kernel/defs.h b/kernel/defs.h
+index a3c962b..b8a6919 100644
+--- a/kernel/defs.h
++++ b/kernel/defs.h
+@@ -8,6 +8,7 @@ struct spinlock;
+ struct sleeplock;
+ struct stat;
+ struct superblock;
++struct swap;
+ 
+ // bio.c
+ void            binit(void);
+@@ -36,6 +37,8 @@ int             filewrite(struct file*, uint64, int n);
+ 
+ // fs.c
+ void            fsinit(int);
++uint            balloc(uint dev);
++void            bfree(int dev, uint b);
+ int             dirlink(struct inode*, char*, uint);
+ struct inode*   dirlookup(struct inode*, char*, uint*);
+ struct inode*   ialloc(uint, short);
+@@ -107,6 +110,13 @@ int             either_copyout(int user_dst, uint64 dst, void *src, uint64 len);
+ int             either_copyin(void *dst, int user_src, uint64 src, uint64 len);
+ void            procdump(void);
+ 
++// swap.c
++void            swapinit(void);
++void            swapfree(struct swap*);
++struct swap*    swapalloc(void);
++void            swapout(struct swap *dst_sp, char *src_pa);
++void            swapin(char *dst_pa, struct swap *src_sp);
++
+ // swtch.S
+ void            swtch(struct context*, struct context*);
+ 
+diff --git a/kernel/fs.c b/kernel/fs.c
+index c6bab15..2d9b419 100644
+--- a/kernel/fs.c
++++ b/kernel/fs.c
+@@ -62,7 +62,7 @@ bzero(int dev, int bno)
+ 
+ // Allocate a zeroed disk block.
+ // returns 0 if out of disk space.
+-static uint
++uint
+ balloc(uint dev)
+ {
+   int b, bi, m;
+@@ -88,7 +88,7 @@ balloc(uint dev)
+ }
+ 
+ // Free a disk block.
+-static void
++void
+ bfree(int dev, uint b)
+ {
+   struct buf *bp;
+diff --git a/kernel/swap.c b/kernel/swap.c
+new file mode 100644
+index 0000000..f33bf40
+--- /dev/null
++++ b/kernel/swap.c
+@@ -0,0 +1,135 @@
++#include "types.h"
++#include "riscv.h"
++#include "fs.h"
++#include "spinlock.h"
++#include "defs.h"
++#include "param.h"
++#include "sleeplock.h"
++#include "buf.h"
++
++#define NBLOCKPERPAGE (PGSIZE / BSIZE)
++
++struct swap {
++  uint blocknos[NBLOCKPERPAGE];
++};
++
++struct run {
++  struct run *next;
++};
++
++struct {
++  struct spinlock lock;
++  struct run *freelist;
++} swapmem;
++
++// Initialize swapmem
++void
++swapinit(void)
++{
++  initlock(&swapmem.lock, "swapmem");
++  swapmem.freelist = 0;
++}
++
++// Allocate one swap struct.
++// Returns a pointer to the swap struct.
++// Returns 0 if the memory cannot be allocated.
++struct swap *
++swapalloc(void)
++{
++  struct run *r;
++  struct swap *s;
++
++  acquire(&swapmem.lock);
++  r = swapmem.freelist;
++  if(!r){
++    release(&swapmem.lock);
++    char *mem = kalloc();
++    char *mem_end = mem + PGSIZE;
++    for(; mem + sizeof(struct swap) <= mem_end; mem += sizeof(struct swap)){
++      r = (struct run*)mem;
++
++      acquire(&swapmem.lock);
++      r->next = swapmem.freelist;
++      swapmem.freelist = r;
++      release(&swapmem.lock);
++    }
++    acquire(&swapmem.lock);
++    r = swapmem.freelist;
++  }
++  swapmem.freelist = r->next;
++  release(&swapmem.lock);
++  
++  s = (struct swap*)r;
++  if(s)
++    memset((char*)s->blocknos, 0, sizeof(s->blocknos)); // fill with zeros
++  
++  return s;
++}
++
++// Free the swap struct pointed by s, and the blocks
++// contained in s, which normally should have been returned
++// by a call to swapalloc() and swapout().
++void
++swapfree(struct swap *s)
++{
++  uint *blockno;
++  struct run *r;
++
++  if(!s)
++    panic("swapfree");
++  
++  begin_op();
++  for(blockno = s->blocknos; blockno < &s->blocknos[NBLOCKPERPAGE]; blockno++){
++    if(*blockno)
++      bfree(ROOTDEV, *blockno);
++  }
++  end_op();
++
++  r = (struct run*)s;
++
++  acquire(&swapmem.lock);
++  r->next = swapmem.freelist;
++  swapmem.freelist = r;
++  release(&swapmem.lock);
++}
++
++// Swap out a given physical page src_pa to disk.
++// The metadata for retriving src_pa will be saved
++// to dst_pa which normally should have been returned
++// by a call to swapalloc().
++void
++swapout(struct swap *dst_sp, char *src_pa)
++{
++  uint *blockno;
++  struct buf *bp;
++  
++  begin_op();
++  for(blockno = dst_sp->blocknos; blockno < &dst_sp->blocknos[NBLOCKPERPAGE]; blockno++, src_pa += BSIZE){
++    *blockno = balloc(ROOTDEV);
++    if(*blockno == 0)
++      panic("swapout");
++    bp = bread(ROOTDEV, *blockno);
++    memmove(bp->data, src_pa, BSIZE);
++    log_write(bp);
++    brelse(bp);
++  }
++  end_op();
++}
++
++// Swap in a page into dst_pa from disk using src_sp.
++// src_sp should normally be updated with metadata
++// for retriving the page by a call to swapout().
++void
++swapin(char *dst_pa, struct swap *src_sp)
++{
++  uint *blockno;
++  struct buf *bp;
++  
++  if(!dst_pa)
++    panic("swapin");
++  for(blockno = src_sp->blocknos; blockno < &src_sp->blocknos[NBLOCKPERPAGE]; blockno++, dst_pa += BSIZE){
++    bp = bread(ROOTDEV, *blockno);
++    memmove(dst_pa, bp->data, BSIZE);
++    brelse(bp);
++  }
++}
diff --git a/user/mytests.c b/user/mytests.c
new file mode 100644
index 0000000..b69f47f
--- /dev/null
+++ b/user/mytests.c
@@ -0,0 +1,81 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "kernel/fcntl.h"
+#include "user/user.h"
+
+int main(){
+
+    // int x;
+    // x = 0;
+    // printf("%d\n", x);
+    livepages();
+    void *ptr = sbrk(1024);
+    char* e = (char*) ptr + 1023;
+    *e = 6;
+    livepages();
+    sbrk(-1024);
+    livepages();
+    return 0;
+
+}
+
+// #include "kernel/param.h"
+// #include "kernel/types.h"
+// #include "kernel/stat.h"
+// #include "user/user.h"
+// #include "kernel/fs.h"
+// #include "kernel/fcntl.h"
+// #include "kernel/syscall.h"
+// #include "kernel/memlayout.h"
+// #include "kernel/riscv.h"
+
+
+
+// int
+// main(int argc, char *argv[]){
+//     live_count();
+//     sbrk(20000);
+//     int arr[1000];
+//     for (int i = 0; i < 1000; i++){
+//         arr[i] = (i*i)%1000;
+//     }
+//     live_count();
+//     for (int i = 0; i < 1000; i++){
+//         printf("arr[%d] = %d\n",i,arr[i]);
+//     }
+//     // sbrk(-20000);
+//     live_count();
+
+//     return 0;
+// }
+
+// int main(int argc, char *argv[])
+// {   
+//   enum { BIG=100 };
+//   char   *a, *lastaddr, *p;
+//   uint64 amt;
+
+// //   oldbrk = sbrk(0);
+
+//   // can one grow address space to something big?
+//   printf("mysbrk1\n");
+//   a = sbrk(0);
+//   amt = BIG * 1024- (uint64)a;
+//   printf("mysbrk2\n");
+//   printf("%d\n", (uint64)a);
+//   p = sbrk(amt);
+//     lastaddr = 0;
+//     printf("p: %p\n", p);
+    
+//   // touch each page to make sure it exists.
+//   char *eee = sbrk(0);
+//   for(char *pp = a; pp < eee; pp += 4096){
+//     *pp = 53;
+//     lastaddr = pp;
+//   }
+
+// //   lastaddr = (char*) (BIG-1);
+// //   *lastaddr = 99;
+//     printf("lastaddr: %d\n", *lastaddr);
+//     return 0;
+// }
\ No newline at end of file
diff --git a/user/mytests2.c b/user/mytests2.c
new file mode 100644
index 0000000..00bf045
--- /dev/null
+++ b/user/mytests2.c
@@ -0,0 +1,21 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "kernel/fcntl.h"
+#include "user/user.h"
+
+int main(){
+
+    // int x;
+    // x = 0;
+    // printf("%d\n", x);
+    livepages();
+    sbrk(4096 * 16);
+    if(fork()){
+        wait(0);
+    }
+    livepages();
+    sbrk(-4096 * 16);
+    livepages();
+    return 0;
+
+}
\ No newline at end of file
diff --git a/user/testck3.c b/user/testck3.c
new file mode 100644
index 0000000..40c14ed
--- /dev/null
+++ b/user/testck3.c
@@ -0,0 +1,44 @@
+
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+
+void main(int argc, char *argv[]){
+
+  printf("starting with = %d\n",  cowtest1());
+  int x = 314;
+
+  printf("x=314, then = %d\n",  cowtest1());
+  printf("Before fork = %d\n",  cowtest1());
+
+  
+
+ 
+  if (fork()==0) {
+
+    printf("Before child write,  %d\n",  cowtest1());
+    printf("child has x = %d\n",x);
+    x = 1805006;
+    printf("child says x = %d\n",x);
+    printf("After child write %d\n",  cowtest1());
+    } 
+    else 
+    {
+      
+    wait(0);
+
+
+    printf("Before parent write,  %d\n",  cowtest1());
+    
+    printf("parent got x = %d\n",x);
+    x = 2080;
+    printf("parent wrote x = %d\n",x);
+    printf("After parent write %d\n",  cowtest1());
+
+    printf("At the end %d\n",  cowtest1());
+    }
+    
+  
+}
+
diff --git a/user/testck4.c b/user/testck4.c
new file mode 100644
index 0000000..7c7b2bb
--- /dev/null
+++ b/user/testck4.c
@@ -0,0 +1,61 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+
+char buf[4096];
+
+void
+cat(int fd)
+{
+  int n;
+
+  while((n = read(fd, buf, sizeof(buf))) > 0) {
+    if (write(1, buf, n) != n) {
+      fprintf(2, "cat: write error\n");
+      exit(1);
+    }
+    break;
+  }
+  if(n < 0){
+    fprintf(2, "cat: read error\n");
+    exit(1);
+  }
+}
+
+void main(int argc, char *argv[]){
+  int fd = open("README", 0);
+    if(fd < 0){
+        printf("open(README) failed\n");
+        exit(1);
+    }
+    cat(fd);
+    close(fd);
+  int pid = fork();
+  if (pid == 0) {
+      
+      int fd = open("README", 0);
+      if(fd < 0){
+        printf("child open(README) failed\n");
+        exit(1);
+      }
+      cat(fd);
+      close(fd);
+    } 
+    else 
+    {
+ 
+    wait(0);
+
+    int fd = open("README", 0);
+    if(fd < 0){
+        printf("parent open(README) failed\n");
+        exit(1);
+      }
+    cat(fd);
+    close(fd);
+    
+    }
+    
+}
+
diff --git a/user/user.h b/user/user.h
index 4d398d5..2ce9adb 100644
--- a/user/user.h
+++ b/user/user.h
@@ -22,6 +22,9 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int livepages(void);
+int cowtest1(void);
+int cowtest2(void);
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/user/usys.pl b/user/usys.pl
old mode 100755
new mode 100644
index 01e426e..93253bb
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,6 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("livepages");
+entry("cowtest1");
+entry("cowtest2");
\ No newline at end of file
